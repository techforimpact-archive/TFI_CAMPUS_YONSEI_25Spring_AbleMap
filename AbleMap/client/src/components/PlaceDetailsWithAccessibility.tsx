import { useState, useEffect } from "react";
import {
  X,
  Upload,
  Info,
  CircleDashed,
  CheckCircle2,
  XCircle,
  Image as ImageIcon,
} from "lucide-react";
import { Place, AccessibilityReport } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { toast } from "@/hooks/use-toast";
import { removeCurrentSearchPinMarker } from "@/lib/kakaoMap";
import BookmarkButton from "@/components/BookmarkButton";
import { isLoggedInWithKakao } from "@/lib/kakaoAuth";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { apiRequest } from "@/lib/queryClient";
import { Progress } from "@/components/ui/progress";
import AccessibilityImageUpload from "./AccessibilityImageUpload";
import UserImageGallery from "./UserImageGallery";
import {
  trackAccessibilityTabClick,
  trackAccessibilityRegistration,
  trackAccessibilityInfoMissingView,
  trackAccessibilityInfoAvailableView,
} from "@/lib/amplitude";

interface AccessibilityImage {
  type: "entrance" | "elevator" | "toilet";
  url: string | null;
  description: string;
}

interface PlaceDetailsWithAccessibilityProps {
  place: Place;
  onClose: () => void;
}

export default function PlaceDetailsWithAccessibility({
  place,
  onClose,
}: PlaceDetailsWithAccessibilityProps) {
  const [showUploadDialog, setShowUploadDialog] = useState(false);
  const [activeTab, setActiveTab] = useState<
    "summary" | "entrance" | "elevator" | "toilet"
  >("summary");
  const [accessibilityData, setAccessibilityData] =
    useState<AccessibilityReport | null>(null);
  const [loading, setLoading] = useState(false);
  const [placeImages, setPlaceImages] = useState<{ [key: string]: string[] }>({
    entrance: [],
    elevator: [],
    toilet: [],
  });
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [showImageModal, setShowImageModal] = useState(false);

  // ÌÉ≠ ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ (Ïù¥Î≤§Ìä∏ Ìä∏ÎûòÌÇπ Ìè¨Ìï®)
  const handleTabClick = (
    tabName: "summary" | "entrance" | "elevator" | "toilet",
  ) => {
    setActiveTab(tabName);
    trackAccessibilityTabClick(
      tabName,
      place.kakaoPlaceId,
      place.placeName || place.name || "Unknown Place",
    );
  };

  // Load accessibility data and user info on component mount
  useEffect(() => {
    const initializeComponent = async () => {
      try {
        await fetchAccessibilityData();
        await fetchPlaceImages(); // Enable image loading
        await checkLoginStatus();
      } catch (error) {
        console.error("Ïª¥Ìè¨ÎÑåÌä∏ Ï¥àÍ∏∞Ìôî Ï§ë Ïò§Î•ò:", error);
      }
    };

    initializeComponent();

    // Î™®Îã¨Ïù¥ Ïó¥Î¶¥ Îïå ÌîºÎìúÎ∞± Î≤ÑÌäº Ïà®Í∏∞Í∏∞ Ïù¥Î≤§Ìä∏ Î∞úÏÉù
    window.dispatchEvent(new CustomEvent("placeModalOpen"));

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏Îê† Îïå ÎßàÏª§Î•º Ï†úÍ±∞ÌïòÎäî ÌÅ¥Î¶∞ÏóÖ Ìï®Ïàò
    return () => {
      console.log(
        "üßπ PlaceDetailsWithAccessibility Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏: ÎßàÏª§ ÏûêÎèô Ï†úÍ±∞",
      );
      // Î™®Îã¨Ïù¥ Îã´Ìûê Îïå ÌîºÎìúÎ∞± Î≤ÑÌäº Îã§Ïãú ÌëúÏãú Ïù¥Î≤§Ìä∏ Î∞úÏÉù
      window.dispatchEvent(new CustomEvent("placeModalClose"));
      try {
        removeCurrentSearchPinMarker();
      } catch (error) {
        console.error("Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú ÎßàÏª§ Ï†úÍ±∞ Ïò§Î•ò:", error);
      }
    };
  }, [place.id]);

  // Track accessibility info missing view when data is null/empty
  useEffect(() => {
    // Only track if loading is complete and no accessibility data exists
    if (!loading && !accessibilityData) {
      trackAccessibilityInfoMissingView(
        place.kakaoPlaceId || place.id?.toString() || "unknown",
        place.placeName || place.name || "Unknown Place",
        Boolean(place.name || place.address), // has basic info if name or address exists
      );
    }
  }, [loading, accessibilityData, place]);

  // Track accessibility info available view when data exists
  useEffect(() => {
    // Only track if loading is complete and accessibility data exists
    if (!loading && accessibilityData) {
      trackAccessibilityInfoAvailableView(
        place.kakaoPlaceId || place.id?.toString() || "unknown",
        place.placeName || place.name || "Unknown Place",
        accessibilityData.accessibility_score || 0,
        activeTab,
      );
    }
  }, [loading, accessibilityData, activeTab, place]);

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ Ìï®Ïàò
  const checkLoginStatus = async () => {
    const loggedIn = isLoggedInWithKakao();
    setIsLoggedIn(loggedIn);

    if (loggedIn) {
      try {
        const accessToken = localStorage.getItem("kakao_access_token");
        const headers: HeadersInit = {};

        if (accessToken) {
          headers["Authorization"] = `Bearer ${accessToken}`;
        }

        const response = await fetch("/api/auth/kakao/user", { headers });
        if (response.ok) {
          const userData = await response.json();
          setCurrentUser(userData);
        }
      } catch (error) {
        console.error("ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:", error);
      }
    } else {
      setCurrentUser(null);
    }
  };

  // Ïû•ÏÜå Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
  const fetchPlaceImages = async () => {
    try {
      // APIÎ•º ÌÜµÌï¥ Ïû•ÏÜå Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ - kakaoPlaceId ÏÇ¨Ïö©
      const placeId = place.kakaoPlaceId || place.id;
      const response = await fetch(`/api/places/${placeId}/images`);
      if (!response.ok) {
        console.log("Ïû•ÏÜå Ïù¥ÎØ∏ÏßÄÎ•º Í∞ÄÏ†∏Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        return;
      }

      const data = await response.json();

      // Ïù¥ÎØ∏ÏßÄÎ•º ÌÉÄÏûÖÎ≥ÑÎ°ú Î∂ÑÎ•ò
      const imagesByType: { [key: string]: string[] } = {
        entrance: [],
        elevator: [],
        toilet: [],
      };

      data.forEach((image: any) => {
        const imageType = image.image_type || image.imageType;
        const imageUrl = image.image_url || image.imageUrl;
        if (imageType in imagesByType) {
          imagesByType[imageType].push(imageUrl);
        }
      });

      setPlaceImages(imagesByType);
    } catch (error) {
      console.error("Failed to fetch place images:", error);
    }
  };

  const fetchAccessibilityData = async () => {
    try {
      setLoading(true);

      // Ïû•ÏÜå Ï†ïÎ≥¥ÏôÄ Ìï®Íªò Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÏöîÏ≤≠ (Ï¢åÌëú Í∏∞Î∞ò Îß§Ïπ≠ÏùÑ ÏúÑÌï¥)
      const searchParams = new URLSearchParams({
        name: place.name || "",
        lat: place.latitude || "",
        lng: place.longitude || "",
      });

      console.log(
        `Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ API Ìò∏Ï∂ú - ${place.name} (${place.latitude}, ${place.longitude})`,
      );
      const response = await fetch(
        `/api/places/${place.kakaoPlaceId || place.id}/accessibility?${searchParams}`,
      );
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      setAccessibilityData(data);

      // Ï†ëÍ∑ºÏÑ± Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå
      fetchPlaceImages();
    } catch (error) {
      console.error("Failed to fetch accessibility data:", error);
      // Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÏÉÅÌÉú Ïú†ÏßÄ
      setAccessibilityData(null);
    } finally {
      setLoading(false);
    }
  };

  const hasAccessibilityData = accessibilityData !== null;

  // Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÏóÖÎ°úÎìú Ï≤òÎ¶¨ Ìï®Ïàò
  const handleUpload = async () => {
    try {
      setLoading(true);

      // Ïó¨Í∏∞ÏÑúÎäî ÏòàÏãú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§. Ïã§Ï†úÎ°úÎäî formÏóêÏÑú ÏàòÏßëÌïú Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©Ìï¥Ïïº Ìï©ÎãàÎã§.
      const demoAccessibilityData: AccessibilityReport = {
        summary: "ÏÇ¨Ïö©Ïûê Ï†úÍ≥µ Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ÏûÖÎãàÎã§.",
        recommendations: [
          "Ìú†Ï≤¥Ïñ¥ Ïù¥Ïö©ÏûêÎäî Ï†ïÎ¨∏Î≥¥Îã§ ÏòÜÎ¨∏ÏùÑ Ïù¥Ïö©ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.",
        ],
        accessibility_score: 6,
        highlighted_obstacles: ["stairs", "narrow_entrance"],
        ai_analysis: {
          has_stairs: true,
          has_ramp: false,
          entrance_accessible: false,
          obstacles: ["stairs", "narrow_door"],
        },
        facility_details: {
          entrance: {
            accessible: false,
            features: ["stairs"],
          },
          restroom: {
            available: true,
            features: ["standard_size"],
          },
          parking: {
            available: false,
            features: [],
          },
          elevator: {
            available: false,
          },
        },
      };

      const response = await fetch(`/api/places/${place.id}/accessibility`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(demoAccessibilityData),
      });

      if (!response.ok) {
        throw new Error("Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }

      const updatedData = await response.json();
      setAccessibilityData(updatedData);

      toast({
        title: "Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Í∞Ä ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§.",
        description: "ÏÜåÏ§ëÌïú Ï†ïÎ≥¥ Í≥µÏú†Ïóê Í∞êÏÇ¨ÎìúÎ¶ΩÎãàÎã§!",
        duration: 3000,
      });

      setShowUploadDialog(false);
    } catch (error) {
      console.error("Upload error:", error);
      toast({
        title: "ÏóÖÎ°úÎìú Ïã§Ìå®",
        description:
          "Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
        duration: 3000,
      });
    } finally {
      setLoading(false);
    }
  };

  // Ïù¥ÎØ∏ÏßÄ ÌôïÎåÄ Î≥¥Í∏∞ Ìï®Ïàò
  const handleImageClick = (imageUrl: string) => {
    setSelectedImage(imageUrl);
    setShowImageModal(true);
  };

  const closeImageModal = () => {
    setShowImageModal(false);
    setSelectedImage(null);
  };

  // Sample guide text for each accessibility feature
  const guideText = {
    summary:
      "Ïû•ÏÜåÏùò Ï†ÑÎ∞òÏ†ÅÏù∏ Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Î•º ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî. Ìú†Ï≤¥Ïñ¥ Ïù¥Ïö©ÏûêÍ∞Ä Ïù¥Ïö©Ìï† Ïàò ÏûàÎäîÏßÄ Îì±Ïùò Ï†ïÎ≥¥Í∞Ä Ìè¨Ìï®ÎêòÎ©¥ Ï¢ãÏäµÎãàÎã§.",
    entrance:
      "Í±¥Î¨ºÏùò Ï†ïÎ¨∏Ïù¥ÎÇò Ï£ºÏöî Ï∂úÏûÖÍµ¨Ïùò ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî. Í≥ÑÎã®Ïù¥ÎÇò Í≤ΩÏÇ¨Î°ú, ÏûêÎèôÎ¨∏ Îì±Ïùò ÌäπÏßïÏù¥ Ïûò Î≥¥Ïù¥Îäî ÏÇ¨ÏßÑÏù¥ Ï¢ãÏäµÎãàÎã§.",
    elevator:
      "ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞Ïùò ÌÅ¨Í∏∞, Î≤ÑÌäº ÎÜíÏù¥, Ï†êÏûê ÌëúÏãú Îì±Ïù¥ Ïûò Î≥¥Ïù¥Îäî ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.",
    toilet:
      "ÌôîÏû•Ïã§ ÏûÖÍµ¨, ÎÇ¥Î∂Ä Í≥µÍ∞Ñ, Ìé∏Ïùò ÏãúÏÑ§ Îì±Ïù¥ Ïûò Î≥¥Ïù¥Îäî ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.",
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex flex-col">
      <div className="bg-white rounded-t-xl flex-1 overflow-auto max-h-full flex flex-col">
        {/* Header */}
        <div className="sticky top-0 bg-white z-10 border-b border-gray-200">
          <div className="flex justify-between items-center p-4">
            <div className="flex-1">
              <h1 className="text-xl font-bold truncate">{place.name}</h1>
              <p className="text-sm text-gray-500 truncate">{place.address}</p>
            </div>
            <div className="flex items-center gap-2">
              <BookmarkButton place={place} className="text-xs" />
              <Button
                variant="ghost"
                size="icon"
                onClick={() => {
                  console.log("ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Îã´Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠ - ÏßÅÏ†ë ÎßàÏª§ Ï†úÍ±∞");
                  // ÌîºÎìúÎ∞± Î≤ÑÌäº Îã§Ïãú ÌëúÏãú Ïù¥Î≤§Ìä∏ Î∞úÏÉù
                  window.dispatchEvent(new CustomEvent("placeModalClose"));
                  try {
                    // 1. ÏßÅÏ†ë ÎßàÏª§ Ï†úÍ±∞ Ìï®Ïàò Ìò∏Ï∂ú
                    removeCurrentSearchPinMarker();
                  } catch (e) {
                    console.error("ÎßàÏª§ Ï†úÍ±∞ Ïò§Î•ò:", e);
                  }
                  // 2. ÏõêÎûò Îã´Í∏∞ Ìï®Ïàò Ìò∏Ï∂ú
                  onClose();
                }}
                className="text-gray-600"
              >
                <X className="h-6 w-6" />
              </Button>
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 overflow-auto">
          {loading ? (
            // Î°úÎî© Ï§ëÏùº Îïå
            <div className="flex justify-center items-center h-full p-6">
              <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mb-4 ml-10"></div>
                <p>Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë...</p>
              </div>
            </div>
          ) : hasAccessibilityData ? (
            // Ï†ëÍ∑ºÏÑ± Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ Îïå
            <div className="p-4 space-y-6">
              {/* Ï†ëÍ∑ºÏÑ± ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
              <div className="flex border-b border-gray-200">
                <button
                  className={`flex-1 py-2 px-4 text-center font-medium ${
                    activeTab === "summary"
                      ? "text-yellow-500 border-b-2 border-yellow-500"
                      : "text-gray-500"
                  }`}
                  onClick={() => handleTabClick("summary")}
                >
                  ÏöîÏïΩ
                </button>
                <button
                  className={`flex-1 py-2 px-4 text-center font-medium ${
                    activeTab === "entrance"
                      ? "text-yellow-500 border-b-2 border-yellow-500"
                      : "text-gray-500"
                  }`}
                  onClick={() => handleTabClick("entrance")}
                >
                  Ï∂úÏûÖÍµ¨
                </button>
                <button
                  className={`flex-1 py-2 px-4 text-center font-medium ${
                    activeTab === "elevator"
                      ? "text-yellow-500 border-b-2 border-yellow-500"
                      : "text-gray-500"
                  }`}
                  onClick={() => handleTabClick("elevator")}
                >
                  ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞
                </button>
                <button
                  className={`flex-1 py-2 px-4 text-center font-medium ${
                    activeTab === "toilet"
                      ? "text-yellow-500 border-b-2 border-yellow-500"
                      : "text-gray-500"
                  }`}
                  onClick={() => handleTabClick("toilet")}
                >
                  ÌôîÏû•Ïã§
                </button>
              </div>

              {/* Ï†ëÍ∑ºÏÑ± Ïª®ÌÖêÏ∏† */}
              {activeTab === "summary" && accessibilityData && (
                <div className="space-y-6">
                  {/* Ï†ëÍ∑ºÏÑ± Ï†êÏàò */}
                  <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                    <div className="flex justify-between items-center mb-2">
                      <h3 className="text-lg font-semibold">Ï†ëÍ∑ºÏÑ± Ï†êÏàò</h3>
                      <div className="flex items-center">
                        <CircleDashed className="h-5 w-5 text-yellow-500 mr-1" />
                        <span className="font-bold text-xl">
                          {accessibilityData.accessibility_score}/10
                        </span>
                      </div>
                    </div>
                    <div className="relative w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                      <div
                        className={`h-full rounded-full ${
                          accessibilityData.accessibility_score >= 7
                            ? "bg-green-500"
                            : accessibilityData.accessibility_score >= 4
                              ? "bg-amber-500"
                              : "bg-red-500"
                        }`}
                        style={{
                          width: `${accessibilityData.accessibility_score * 10}%`,
                          animation: `progressFillAnimation 1.5s ease-out forwards`,
                          transform: "translateX(-100%)",
                          animationDelay: "0.3s",
                        }}
                      />
                    </div>
                  </div>

                  {/* ÏöîÏïΩ Ï†ïÎ≥¥ - Ï£ºÏÑùÏ≤òÎ¶¨ */}
                  {/* <div className="bg-gray-50 p-5 rounded-lg">
                    <h3 className="text-lg font-semibold mb-3">ÏöîÏïΩ</h3>
                    <p className="text-gray-700 mb-4">
                      {accessibilityData.summary}
                    </p>
                  </div> */}

                  {/* Ï∂îÏ≤ú ÏÇ¨Ìï≠ */}
                  {accessibilityData.recommendations &&
                    Array.isArray(accessibilityData.recommendations) &&
                    accessibilityData.recommendations.length > 0 && (
                      <div className="space-y-3">
                        <h3 className="text-lg font-semibold">
                          Ïù¥ÎèôÏïΩÏûê Ïù¥Ïö© Ïãú Ï∞∏Í≥†ÏÇ¨Ìï≠
                        </h3>
                        <ul className="space-y-2">
                          {accessibilityData.recommendations.map(
                            (rec, index) => (
                              <li key={index} className="flex items-start">
                                <span className="text-yellow-500 mr-2 mt-1">
                                  ‚Ä¢
                                </span>
                                <span>{rec}</span>
                              </li>
                            ),
                          )}
                        </ul>
                      </div>
                    )}

                  {/* Ïû•Ïï†Î¨º Ï†ïÎ≥¥ */}
                  {accessibilityData.highlighted_obstacles &&
                    Array.isArray(accessibilityData.highlighted_obstacles) &&
                    accessibilityData.highlighted_obstacles.length > 0 && (
                      <div className="space-y-3">
                        <h3 className="text-lg font-semibold">Ï£ºÏöî Ïû•Ïï†Î¨º</h3>
                        <div className="flex flex-wrap gap-2">
                          {accessibilityData.highlighted_obstacles.map(
                            (obstacle, index) => (
                              <span
                                key={index}
                                className="px-3 py-1 bg-red-50 text-red-600 rounded-full text-sm font-medium"
                              >
                                {obstacle}
                              </span>
                            ),
                          )}
                        </div>
                      </div>
                    )}

                  {/* ÏÇ¨Ïö©Ïûê ÏóÖÎ°úÎìú Ïù¥ÎØ∏ÏßÄ */}
                  <UserImageGallery
                    poiId={place.kakaoPlaceId}
                    placeName={place.placeName || place.name}
                    showUploadButton={true}
                    maxItems={6}
                  />

                  {/* AI Î∂ÑÏÑù Í≤∞Í≥º */}
                  {accessibilityData.ai_analysis &&
                    typeof accessibilityData.ai_analysis === "object" && (
                      <div className="space-y-3">
                        <h3 className="text-lg font-semibold">AI Î∂ÑÏÑù Í≤∞Í≥º</h3>
                        <div className="grid grid-cols-2 gap-3">
                          {/* Í≥ÑÎã® Ïó¨Î∂Ä */}
                          {typeof accessibilityData.ai_analysis.has_stairs ===
                            "boolean" && (
                            <div className="flex items-center p-3 bg-white rounded-lg border border-gray-100">
                              <div className="mr-3">
                                {accessibilityData.ai_analysis.has_stairs ? (
                                  <XCircle className="h-5 w-5 text-red-500" />
                                ) : (
                                  <CheckCircle2 className="h-5 w-5 text-green-500" />
                                )}
                              </div>
                              <div>
                                <span className="text-sm font-medium">
                                  Í≥ÑÎã® Ïó¨Î∂Ä
                                </span>
                                <p className="text-xs text-gray-500">
                                  {accessibilityData.ai_analysis.has_stairs
                                    ? "Í≥ÑÎã®Ïù¥ ÏûàÏäµÎãàÎã§"
                                    : "Í≥ÑÎã®Ïù¥ ÏóÜÏäµÎãàÎã§"}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* Í≤ΩÏÇ¨Î°ú Ïó¨Î∂Ä */}
                          {typeof accessibilityData.ai_analysis.has_ramp ===
                            "boolean" && (
                            <div className="flex items-center p-3 bg-white rounded-lg border border-gray-100">
                              <div className="mr-3">
                                {accessibilityData.ai_analysis.has_ramp ? (
                                  <CheckCircle2 className="h-5 w-5 text-green-500" />
                                ) : (
                                  <XCircle className="h-5 w-5 text-red-500" />
                                )}
                              </div>
                              <div>
                                <span className="text-sm font-medium">
                                  Í≤ΩÏÇ¨Î°ú Ïó¨Î∂Ä
                                </span>
                                <p className="text-xs text-gray-500">
                                  {accessibilityData.ai_analysis.has_ramp
                                    ? "Í≤ΩÏÇ¨Î°úÍ∞Ä ÏûàÏäµÎãàÎã§"
                                    : "Í≤ΩÏÇ¨Î°úÍ∞Ä ÏóÜÏäµÎãàÎã§"}
                                </p>
                              </div>
                            </div>
                          )}

                          {/* ÏûÖÍµ¨ Ï†ëÍ∑ºÏÑ± */}
                          {typeof accessibilityData.ai_analysis
                            .entrance_accessible === "boolean" && (
                            <div className="flex items-center p-3 bg-white rounded-lg border border-gray-100">
                              <div className="mr-3">
                                {accessibilityData.ai_analysis
                                  .entrance_accessible ? (
                                  <CheckCircle2 className="h-5 w-5 text-green-500" />
                                ) : (
                                  <XCircle className="h-5 w-5 text-red-500" />
                                )}
                              </div>
                              <div>
                                <span className="text-sm font-medium">
                                  ÏûÖÍµ¨ Ï†ëÍ∑º Í∞ÄÎä•
                                </span>
                                <p className="text-xs text-gray-500">
                                  {accessibilityData.ai_analysis
                                    .entrance_accessible
                                    ? "Ï†ëÍ∑º Í∞ÄÎä•Ìï©ÎãàÎã§"
                                    : "Ï†ëÍ∑ºÏù¥ Ïñ¥Î†µÏäµÎãàÎã§"}
                                </p>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                </div>
              )}

              {/* ÏÑ∏Î∂Ä ÏãúÏÑ§ Ï†ïÎ≥¥ ÌÉ≠ */}
              {activeTab === "entrance" &&
                accessibilityData?.facility_details && (
                  <div className="space-y-4">
                    <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Ï∂úÏûÖÍµ¨ Ï†ïÎ≥¥</h3>
                        <div>
                          {accessibilityData.facility_details.entrance
                            ?.accessible ? (
                            <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm">
                              Ï†ëÍ∑º Í∞ÄÎä•
                            </span>
                          ) : (
                            <span className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                              Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÎØ∏ÌôïÏù∏
                            </span>
                          )}
                        </div>
                      </div>
                      <div className="space-y-3">
                        <h4 className="text-sm font-medium text-gray-500">
                          ÌäπÏßï
                        </h4>
                        <div className="flex flex-wrap gap-2">
                          {accessibilityData.facility_details?.entrance
                            ?.features &&
                          Array.isArray(
                            accessibilityData.facility_details.entrance
                              .features,
                          ) ? (
                            accessibilityData.facility_details.entrance.features.map(
                              (feature, index) => (
                                <span
                                  key={index}
                                  className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                                >
                                  {feature}
                                </span>
                              ),
                            )
                          ) : (
                            <span className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm">
                              Ï†ïÎ≥¥ ÏóÜÏùå
                            </span>
                          )}
                        </div>
                      </div>

                      {/* Ï∂úÏûÖÍµ¨ Ïù¥ÎØ∏ÏßÄ */}
                      {placeImages.entrance.length > 0 && (
                        <div className="mt-5 space-y-3">
                          <h4 className="text-sm font-medium text-gray-500">
                            Ï∂úÏûÖÍµ¨ ÏÇ¨ÏßÑ
                          </h4>
                          <div className="grid grid-cols-1 gap-4">
                            {placeImages.entrance.map((imageUrl, index) => (
                              <div
                                key={index}
                                className="relative"
                                style={{
                                  animation: `fadeInUp 0.5s ease-out ${index * 100}ms both`,
                                }}
                              >
                                <div
                                  className="relative aspect-video rounded-lg overflow-hidden shadow-sm border border-gray-100 cursor-pointer hover:shadow-xl hover:scale-[1.02] transition-all duration-300 transform"
                                  onClick={() => setSelectedImage(imageUrl)}
                                >
                                  <img
                                    src={imageUrl}
                                    alt={`Ï∂úÏûÖÍµ¨ ÏÇ¨ÏßÑ ${index + 1}`}
                                    className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                                  />
                                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-all duration-300 flex items-center justify-center">
                                    <div className="opacity-0 hover:opacity-100 transition-opacity duration-300 bg-white bg-opacity-90 rounded-full p-2">
                                      <svg
                                        className="w-6 h-6 text-gray-700"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
                                        />
                                      </svg>
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-2 flex items-center text-sm text-gray-500">
                                  <ImageIcon className="h-4 w-4 mr-1" />
                                  <span>Ï∂úÏûÖÍµ¨ ÏÇ¨ÏßÑ {index + 1}</span>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

              {activeTab === "elevator" &&
                accessibilityData?.facility_details && (
                  <div className="space-y-4">
                    <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">
                          ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ Ï†ïÎ≥¥
                        </h3>
                        <div>
                          {accessibilityData.facility_details.elevator
                            ?.available ? (
                            <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm">
                              Ïù¥Ïö© Í∞ÄÎä•
                            </span>
                          ) : (
                            <span className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                              Ïù¥Ïö© Î∂àÍ∞Ä
                            </span>
                          )}
                        </div>
                      </div>

                      {/* ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ Ïù¥ÎØ∏ÏßÄ */}
                      {placeImages.elevator.length > 0 && (
                        <div className="mt-5 space-y-3">
                          <h4 className="text-sm font-medium text-gray-500">
                            ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÏÇ¨ÏßÑ
                          </h4>
                          <div className="grid grid-cols-1 gap-4">
                            {placeImages.elevator.map((imageUrl, index) => (
                              <div
                                key={index}
                                className="relative"
                                style={{
                                  animation: `fadeInUp 0.5s ease-out ${index * 100}ms both`,
                                }}
                              >
                                <div
                                  className="relative aspect-video rounded-lg overflow-hidden shadow-sm border border-gray-100 cursor-pointer hover:shadow-xl hover:scale-[1.02] transition-all duration-300 transform"
                                  onClick={() => setSelectedImage(imageUrl)}
                                >
                                  <img
                                    src={imageUrl}
                                    alt={`ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÏÇ¨ÏßÑ ${index + 1}`}
                                    className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                                  />
                                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-all duration-300 flex items-center justify-center">
                                    <div className="opacity-0 hover:opacity-100 transition-opacity duration-300 bg-white bg-opacity-90 rounded-full p-2">
                                      <svg
                                        className="w-6 h-6 text-gray-700"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
                                        />
                                      </svg>
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-2 flex items-center text-sm text-gray-500">
                                  <ImageIcon className="h-4 w-4 mr-1" />
                                  <span>ÏóòÎ¶¨Î≤†Ïù¥ÌÑ∞ ÏÇ¨ÏßÑ {index + 1}</span>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

              {activeTab === "toilet" &&
                accessibilityData?.facility_details && (
                  <div className="space-y-4">
                    <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">ÌôîÏû•Ïã§ Ï†ïÎ≥¥</h3>
                        <div>
                          {accessibilityData.facility_details.restroom
                            ?.available ? (
                            <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm">
                              Ïù¥Ïö© Í∞ÄÎä•
                            </span>
                          ) : (
                            <span className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                              Ïù¥Ïö© Î∂àÍ∞Ä
                            </span>
                          )}
                        </div>
                      </div>
                      {accessibilityData.facility_details.restroom
                        ?.available && (
                        <div className="space-y-3">
                          <h4 className="text-sm font-medium text-gray-500">
                            ÌäπÏßï
                          </h4>
                          <div className="flex flex-wrap gap-2">
                            {accessibilityData.facility_details.restroom?.features?.map(
                              (feature, index) => (
                                <span
                                  key={index}
                                  className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm"
                                >
                                  {feature}
                                </span>
                              ),
                            ) || (
                              <span className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm">
                                Ï†ïÎ≥¥ ÏóÜÏùå
                              </span>
                            )}
                          </div>
                        </div>
                      )}

                      {/* ÌôîÏû•Ïã§ Ïù¥ÎØ∏ÏßÄ */}
                      {placeImages.toilet.length > 0 && (
                        <div className="mt-5 space-y-3">
                          <h4 className="text-sm font-medium text-gray-500">
                            ÌôîÏû•Ïã§ ÏÇ¨ÏßÑ
                          </h4>
                          <div className="grid grid-cols-1 gap-4">
                            {placeImages.toilet.map((imageUrl, index) => (
                              <div
                                key={index}
                                className="relative"
                                style={{
                                  animation: `fadeInUp 0.5s ease-out ${index * 100}ms both`,
                                }}
                              >
                                <div
                                  className="relative aspect-video rounded-lg overflow-hidden shadow-sm border border-gray-100 cursor-pointer hover:shadow-xl hover:scale-[1.02] transition-all duration-300 transform"
                                  onClick={() => setSelectedImage(imageUrl)}
                                >
                                  <img
                                    src={imageUrl}
                                    alt={`ÌôîÏû•Ïã§ ÏÇ¨ÏßÑ ${index + 1}`}
                                    className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
                                  />
                                  <div className="absolute inset-0 bg-black bg-opacity-0 hover:bg-opacity-10 transition-all duration-300 flex items-center justify-center">
                                    <div className="opacity-0 hover:opacity-100 transition-opacity duration-300 bg-white bg-opacity-90 rounded-full p-2">
                                      <svg
                                        className="w-6 h-6 text-gray-700"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"
                                        />
                                      </svg>
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-2 flex items-center text-sm text-gray-500">
                                  <ImageIcon className="h-4 w-4 mr-1" />
                                  <span>ÌôîÏû•Ïã§ ÏÇ¨ÏßÑ {index + 1}</span>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
            </div>
          ) : (
            // Ï†ëÍ∑ºÏÑ± Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ Îïå
            <div className="flex flex-col items-center justify-center p-6 space-y-6 h-full">
              <div className="text-center">
                <div className="bg-gray-100 rounded-full p-4 inline-block mb-4">
                  <Info className="h-10 w-10 text-gray-400" />
                </div>
                <h2 className="text-xl font-semibold mb-2">
                  Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§
                </h2>
                <p className="text-gray-500 max-w-md mx-auto">
                  Ïù¥ Ïû•ÏÜåÏóê ÎåÄÌïú Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Í∞Ä ÏïÑÏßÅ Îì±Î°ùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.
                </p>
              </div>
              <div className="text-center">
                <p className="text-sm font-medium text-gray-700 mb-3">
                  Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïãú 100% Ïª§Ìîº Í∏∞ÌîÑÌã∞ÏΩò Ï¶ùÏ†ï‚òïÔ∏è
                </p>
                <Button
                  className="bg-yellow-400 hover:bg-yellow-500 text-white"
                  onClick={() => {
                    trackAccessibilityRegistration(
                      place.kakaoPlaceId,
                      place.placeName || place.name || "Unknown Place",
                    );
                    window.open(
                      "https://forms.gle/ovuJefBDYvxFt3DV6",
                      "_blank",
                    );
                  }}
                >
                  <Upload className="h-4 w-4 mr-2" />
                  Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ Îì±Î°ùÌïòÍ∏∞
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Upload Dialog */}
      <Dialog open={showUploadDialog} onOpenChange={setShowUploadDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥ ÏóÖÎ°úÎìú</DialogTitle>
            <DialogDescription className="text-gray-500 text-sm">
              Ïã†Ï¥å ÏßÄÏó≠Ïùò Ï†ëÍ∑ºÏÑ± Ï†ïÎ≥¥Î•º Í≥µÏú†ÌïòÏó¨ Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§ÏóêÍ≤å ÎèÑÏõÄÏùÑ
              Ï£ºÏÑ∏Ïöî.
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <h3 className="text-sm font-medium">Í∞ÄÏù¥ÎìúÎùºÏù∏</h3>
              <div className="bg-amber-50 p-3 rounded-md text-sm">
                <p className="text-amber-800">{guideText[activeTab]}</p>
              </div>
            </div>

            {/* AccessibilityImageUpload component */}
            <AccessibilityImageUpload
              placeId={place.kakaoPlaceId || place.id}
              placeName={place.placeName || place.name}
              onUploadSuccess={(imageUrl) => {
                toast({
                  title: "Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÑ±Í≥µ",
                  description: "ÏÇ¨ÏßÑÏù¥ ÏóÖÎ°úÎìúÎêòÏñ¥ Ï†ëÍ∑ºÏÑ± Ïó¨Î∂ÄÎ•º Ï≤òÎ¶¨Ï§ëÏûÖÎãàÎã§",
                  duration: 3000,
                });

                // Refresh images after upload
                fetchPlaceImages();

                // Close dialog after successful upload
                setShowUploadDialog(false);
              }}
              onUploadError={(error) => {
                toast({
                  title: "Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®",
                  description:
                    "Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
                  variant: "destructive",
                  duration: 3000,
                });
              }}
            />
          </div>
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => setShowUploadDialog(false)}
            >
              Îã´Í∏∞
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Image Modal */}
      {selectedImage && (
        <div
          className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center"
          onClick={() => setSelectedImage(null)}
        >
          <div className="relative max-w-4xl max-h-full p-4">
            <button
              onClick={() => setSelectedImage(null)}
              className="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
            >
              <X className="h-8 w-8" />
            </button>
            <img
              src={selectedImage}
              alt="ÌôïÎåÄ Ïù¥ÎØ∏ÏßÄ"
              className="max-w-full max-h-full object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
        </div>
      )}
    </div>
  );
}
