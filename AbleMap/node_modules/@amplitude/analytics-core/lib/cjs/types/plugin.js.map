{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../src/types/plugin.ts"],"names":[],"mappings":"","sourcesContent":["import { Event } from './event/event';\nimport { IConfig } from '../config';\nimport { Result } from './result';\nimport { CoreClient } from '../core-client';\n\ntype PluginTypeBefore = 'before';\ntype PluginTypeEnrichment = 'enrichment';\ntype PluginTypeDestination = 'destination';\nexport type PluginType = PluginTypeBefore | PluginTypeEnrichment | PluginTypeDestination;\n\nexport interface AnalyticsIdentity {\n  deviceId?: string;\n  userId?: string;\n  userProperties?: { [key: string]: any };\n}\n\ninterface PluginBase<T = CoreClient, U = IConfig> {\n  name?: string;\n  type?: PluginType;\n  setup?(config: U, client: T): Promise<void>;\n  teardown?(): Promise<void>;\n  /**\n   * Called when the identity is changed. This is a **best-effort** API and may not be triggered in all scenarios.\n   *\n   * Currently supported only in the Browser SDK. Not supported in React Native or Node SDKs.\n   *\n   * @param identity The changed identity. If a field is missing, it means it has not changed.\n   * For example, `{ userId: undefined }` means the userId was explicitly changed to `undefined`,\n   * while deviceId and userProperties remain unchanged.\n   *\n   * Note: `onIdentityChanged()` will be triggered when a user logs in via `setUserId()`.\n   * It will not be triggered on subsequent page loads (e.g., when a user reopens the site in a new tab).\n   */\n  onIdentityChanged?(identity: AnalyticsIdentity): Promise<void>;\n  onSessionIdChanged?(sessionId: number): Promise<void>;\n  onOptOutChanged?(optOut: boolean): Promise<void>;\n}\n\nexport interface BeforePlugin<T = CoreClient, U = IConfig> extends PluginBase<T, U> {\n  type: PluginTypeBefore;\n  execute?(context: Event): Promise<Event | null>;\n}\n\nexport interface EnrichmentPlugin<T = CoreClient, U = IConfig> extends PluginBase<T, U> {\n  type?: PluginTypeEnrichment;\n  execute?(context: Event): Promise<Event | null>;\n}\n\nexport interface DestinationPlugin<T = CoreClient, U = IConfig> extends PluginBase<T, U> {\n  type: PluginTypeDestination;\n  execute(context: Event): Promise<Result>;\n  flush?(): Promise<void>;\n}\n\nexport type Plugin<T = CoreClient, U = IConfig> = BeforePlugin<T, U> | EnrichmentPlugin<T, U> | DestinationPlugin<T, U>;\n"]}