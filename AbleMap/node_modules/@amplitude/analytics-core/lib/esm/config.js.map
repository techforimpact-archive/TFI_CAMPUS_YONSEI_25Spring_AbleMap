{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { OfflineDisabled } from './types/offline';\nimport { ServerZoneType } from './types/server-zone';\nimport { Transport } from './types/transport';\nimport { Event } from './types/event/event';\nimport { Plan } from './types/event/plan';\nimport { IngestionMetadata } from './types/event/ingestion-metadata';\nimport { Storage } from './types/storage';\nimport {\n  AMPLITUDE_SERVER_URL,\n  AMPLITUDE_BATCH_SERVER_URL,\n  EU_AMPLITUDE_SERVER_URL,\n  EU_AMPLITUDE_BATCH_SERVER_URL,\n} from './types/constants';\n\nimport { Logger, ILogger } from './logger';\nimport { LogLevel } from './types/loglevel';\n\nexport const getDefaultConfig = () => ({\n  flushMaxRetries: 12,\n  flushQueueSize: 200,\n  flushIntervalMillis: 10000,\n  instanceName: '$default_instance',\n  logLevel: LogLevel.Warn,\n  loggerProvider: new Logger(),\n  offline: false,\n  optOut: false,\n  serverUrl: AMPLITUDE_SERVER_URL,\n  serverZone: 'US' as ServerZoneType,\n  useBatch: false,\n});\n\nexport interface IConfig {\n  /**\n   * Your Amplitude Project API key.\n   */\n  apiKey: string;\n  /**\n   * The interval of uploading events to Amplitude in milliseconds.\n   */\n  flushIntervalMillis: number;\n  /**\n   * The maximum number of retries for failed upload attempts. This is only applicable to retryable errors.\n   */\n  flushMaxRetries: number;\n  /**\n   * The maximum number of events that are batched in a single upload attempt.\n   */\n  flushQueueSize: number;\n  /**\n   * The instance name. For tracking events to multiple Amplitude projects in your application.\n   */\n  instanceName?: string;\n  /**\n   * Level of logs to be printed in the developer console.\n   * Valid values are `LogLevel.None`, `LogLevel.Error`, `LogLevel.Warn`, `LogLevel.Verbose`,  `LogLevel.Debug`\n   */\n  logLevel: LogLevel;\n  /**\n   * A custom Logger class to emit log messages to desired destination.\n   */\n  loggerProvider: ILogger;\n  /**\n   * The minimum length for the value of userId and deviceId properties.\n   */\n  minIdLength?: number;\n  /**\n   * Whether the SDK is connected to network.\n   */\n  offline?: boolean | typeof OfflineDisabled;\n  /**\n   *  The flag to opt this device out of Amplitude tracking.\n   *  If this flag is set, no additional information will be stored for the user.\n   */\n  optOut: boolean;\n  /**\n   * Tracking plan properties.\n   * Amplitude internal use.\n   */\n  plan?: Plan;\n  /**\n   * Ingestion metadata.\n   * Amplitude internal use.\n   */\n  ingestionMetadata?: IngestionMetadata;\n  /**\n   * The URL where events are upload to.\n   */\n  serverUrl?: string;\n  /**\n   * The Amplitude server zone.\n   * Set this to EU for Amplitude projects created in EU data center.\n   */\n  serverZone?: ServerZoneType;\n  /**\n   *  The storage provider to persist unsent events.\n   */\n  storageProvider?: Storage<Event[]>;\n  /**\n   * A customer Transport Class for sending data to a server.\n   */\n  transportProvider: Transport;\n  /**\n   * The flag of whether to upload events to Batch API instead of the default HTTP V2 API.\n   */\n  useBatch: boolean;\n  /**\n   * Metrics of the SDK.\n   */\n  requestMetadata?: IRequestMetadata;\n}\n\nexport interface IRequestMetadata {\n  sdk: {\n    metrics: {\n      histogram: IHistogramOptions;\n    };\n  };\n\n  recordHistogram<T extends HistogramKey>(key: T, value: IHistogramOptions[T]): void;\n}\n\nexport interface IHistogramOptions {\n  remote_config_fetch_time_IDB?: number;\n  remote_config_fetch_time_API_success?: number;\n  remote_config_fetch_time_API_fail?: number;\n}\n\nexport type HistogramKey = keyof IHistogramOptions;\n\nexport interface ConfigOptions extends Partial<IConfig> {\n  apiKey: string;\n  transportProvider: Transport;\n}\n\nexport class Config implements IConfig {\n  apiKey: string;\n  flushIntervalMillis: number;\n  flushMaxRetries: number;\n  flushQueueSize: number;\n  instanceName?: string;\n  loggerProvider: ILogger;\n  logLevel: LogLevel;\n  minIdLength?: number;\n  offline?: boolean | typeof OfflineDisabled;\n  plan?: Plan;\n  ingestionMetadata?: IngestionMetadata;\n  serverUrl: string | undefined;\n  serverZone?: ServerZoneType;\n  transportProvider: Transport;\n  storageProvider?: Storage<Event[]>;\n  useBatch: boolean;\n  requestMetadata?: RequestMetadata;\n\n  protected _optOut = false;\n  get optOut() {\n    return this._optOut;\n  }\n  set optOut(optOut: boolean) {\n    this._optOut = optOut;\n  }\n\n  constructor(options: ConfigOptions) {\n    const defaultConfig = getDefaultConfig();\n    this.apiKey = options.apiKey;\n    this.flushIntervalMillis = options.flushIntervalMillis ?? defaultConfig.flushIntervalMillis;\n    this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;\n    this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;\n    this.instanceName = options.instanceName || defaultConfig.instanceName;\n    this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;\n    this.logLevel = options.logLevel ?? defaultConfig.logLevel;\n    this.minIdLength = options.minIdLength;\n    this.plan = options.plan;\n    this.ingestionMetadata = options.ingestionMetadata;\n    this.offline = options.offline !== undefined ? options.offline : defaultConfig.offline;\n    this.optOut = options.optOut ?? defaultConfig.optOut;\n    this.serverUrl = options.serverUrl;\n    this.serverZone = options.serverZone || defaultConfig.serverZone;\n    this.storageProvider = options.storageProvider;\n    this.transportProvider = options.transportProvider;\n    this.useBatch = options.useBatch ?? defaultConfig.useBatch;\n    this.loggerProvider.enable(this.logLevel);\n\n    const serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);\n    this.serverZone = serverConfig.serverZone;\n    this.serverUrl = serverConfig.serverUrl;\n  }\n}\n\nexport const getServerUrl = (serverZone: ServerZoneType, useBatch: boolean) => {\n  if (serverZone === 'EU') {\n    return useBatch ? EU_AMPLITUDE_BATCH_SERVER_URL : EU_AMPLITUDE_SERVER_URL;\n  }\n  return useBatch ? AMPLITUDE_BATCH_SERVER_URL : AMPLITUDE_SERVER_URL;\n};\n\nexport const createServerConfig = (\n  serverUrl = '',\n  serverZone: ServerZoneType = getDefaultConfig().serverZone,\n  useBatch: boolean = getDefaultConfig().useBatch,\n) => {\n  if (serverUrl) {\n    return { serverUrl, serverZone: undefined };\n  }\n  const _serverZone = ['US', 'EU'].includes(serverZone) ? serverZone : getDefaultConfig().serverZone;\n  return {\n    serverZone: _serverZone,\n    serverUrl: getServerUrl(_serverZone, useBatch),\n  };\n};\n\nexport class RequestMetadata implements IRequestMetadata {\n  sdk: {\n    metrics: {\n      histogram: HistogramOptions;\n    };\n  };\n\n  constructor() {\n    this.sdk = {\n      metrics: {\n        histogram: {},\n      },\n    };\n  }\n\n  recordHistogram<T extends HistogramKey>(key: T, value: HistogramOptions[T]) {\n    this.sdk.metrics.histogram[key] = value;\n  }\n}\n\nclass HistogramOptions implements IHistogramOptions {\n  remote_config_fetch_time_IDB?: number;\n  remote_config_fetch_time_API_success?: number;\n  remote_config_fetch_time_API_fail?: number;\n}\n"]}