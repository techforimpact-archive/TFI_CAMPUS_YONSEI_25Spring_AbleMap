{"version":3,"file":"remote-config-localstorage.js","sourceRoot":"","sources":["../../../src/remote-config/remote-config-localstorage.ts"],"names":[],"mappings":"AAGA;IAIE,kCAAY,MAAc,EAAE,MAAe;QACzC,IAAI,CAAC,GAAG,GAAG,4BAAqB,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE,CAAC;QAC1D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,8CAAW,GAAX;QACE,IAAI,MAAM,GAAkB,IAAI,CAAC;QACjC,IAAM,sBAAsB,GAAG;YAC7B,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE;SACtB,CAAC;QAEF,IAAI;YACF,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzC;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAA+C,EAAE,KAAK,CAAC,CAAC;YAC1E,OAAO,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;SAChD;QAED,IAAI,MAAM,KAAK,IAAI,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qEAAqE,CAAC,CAAC;YACzF,OAAO,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;SAChD;QAED,IAAI;YACF,IAAM,gBAAgB,GAAqB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAqB,CAAC;YAClF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;YACrE,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,YAAY,EAAE,gBAAgB,CAAC,YAAY;gBAC3C,SAAS,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;aAChD,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;YACzE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,OAAO,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;SAChD;IACH,CAAC;IAED,4CAAS,GAAT,UAAU,MAAwB;QAChC,IAAI;YACF,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;YAClE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC9B;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;SACxE;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACH,+BAAC;AAAD,CAAC,AApDD,IAoDC","sourcesContent":["import { RemoteConfigStorage, RemoteConfigInfo } from './remote-config';\nimport { ILogger } from '../logger';\n\nexport class RemoteConfigLocalStorage implements RemoteConfigStorage {\n  private readonly key: string;\n  private readonly logger: ILogger;\n\n  constructor(apiKey: string, logger: ILogger) {\n    this.key = `AMP_remote_config_${apiKey.substring(0, 10)}`;\n    this.logger = logger;\n  }\n\n  fetchConfig(): Promise<RemoteConfigInfo> {\n    let result: string | null = null;\n    const failedRemoteConfigInfo = {\n      remoteConfig: null,\n      lastFetch: new Date(),\n    };\n\n    try {\n      result = localStorage.getItem(this.key);\n    } catch (error) {\n      this.logger.debug('Remote config localstorage failed to access: ', error);\n      return Promise.resolve(failedRemoteConfigInfo);\n    }\n\n    if (result === null) {\n      this.logger.debug('Remote config localstorage gets null because the key does not exist');\n      return Promise.resolve(failedRemoteConfigInfo);\n    }\n\n    try {\n      const remoteConfigInfo: RemoteConfigInfo = JSON.parse(result) as RemoteConfigInfo;\n      this.logger.debug('Remote config localstorage parsed successfully.');\n      return Promise.resolve({\n        remoteConfig: remoteConfigInfo.remoteConfig,\n        lastFetch: new Date(remoteConfigInfo.lastFetch),\n      });\n    } catch (error) {\n      this.logger.debug('Remote config localstorage failed to parse: ', error);\n      localStorage.removeItem(this.key);\n      return Promise.resolve(failedRemoteConfigInfo);\n    }\n  }\n\n  setConfig(config: RemoteConfigInfo): Promise<boolean> {\n    try {\n      localStorage.setItem(this.key, JSON.stringify(config));\n      this.logger.debug('Remote config localstorage set successfully.');\n      return Promise.resolve(true);\n    } catch (error) {\n      this.logger.debug('Remote config localstorage failed to set: ', error);\n    }\n    return Promise.resolve(false);\n  }\n}\n"]}