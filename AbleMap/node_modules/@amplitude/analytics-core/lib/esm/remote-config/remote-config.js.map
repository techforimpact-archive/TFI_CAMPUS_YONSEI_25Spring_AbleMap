{"version":3,"file":"remote-config.js","sourceRoot":"","sources":["../../../src/remote-config/remote-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { ServerZoneType } from '../types/server-zone';\nimport { ILogger } from '../logger';\nimport { RemoteConfigLocalStorage } from './remote-config-localstorage';\nimport { UUID } from '../utils/uuid';\n\n/**\n * Modes for receiving remote config updates:\n * - `'all'` – Receive all config updates as they occur.\n * - `{ timeout: number }` – Wait for a remote response until the specified timeout (in milliseconds),\n *   then return a cached copy if available.\n */\nexport type DeliveryMode = 'all' | { timeout: number };\n\n/**\n * Sources of returned remote config:\n * - `cache` - Fetched from local storage.\n * - `remote` - Fetched from remote.\n */\nexport type Source = 'cache' | 'remote';\n\nexport const US_SERVER_URL = 'https://sr-client-cfg.amplitude.com/config';\nexport const EU_SERVER_URL = 'https://sr-client-cfg.eu.amplitude.com/config';\nexport const DEFAULT_MAX_RETRIES = 3;\n\n/**\n * The default timeout for fetch in milliseconds.\n * Linear backoff policy: timeout / retry times is the interval between fetch retry.\n */\nconst DEFAULT_TIMEOUT = 1000;\n// TODO(xinyi)\n// const DEFAULT_MIN_TIME_BETWEEN_FETCHES = 5 * 60 * 1000; // 5 minutes\nexport const FETCHED_KEYS = [\n  'analyticsSDK.browserSDK',\n  'sessionReplay.sr_interaction_config',\n  'sessionReplay.sr_logging_config',\n  'sessionReplay.sr_privacy_config',\n  'sessionReplay.sr_sampling_config',\n  'sessionReplay.sr_targeting_config',\n];\n\nexport interface RemoteConfig {\n  [key: string]: any;\n}\n\nexport interface RemoteConfigInfo {\n  remoteConfig: RemoteConfig | null;\n  // Timestamp of when the remote config was fetched.\n  lastFetch: Date;\n}\n\nexport interface RemoteConfigStorage {\n  /**\n   * Fetch remote config from storage asynchronously.\n   */\n  fetchConfig(): Promise<RemoteConfigInfo>;\n\n  /**\n   * Set remote config to storage asynchronously.\n   */\n  setConfig(config: RemoteConfigInfo): Promise<boolean>;\n}\n\n/**\n * Information about each callback registered by `RemoteConfigClient.subscribe()`,\n * managed internally by `RemoteConfigClient`.\n */\nexport interface CallbackInfo {\n  id: string;\n  key?: string;\n  deliveryMode: DeliveryMode;\n  callback: RemoteConfigCallback;\n  lastCallback?: Date;\n}\n\n/**\n * Callback used in `RemoteConfigClient.subscribe()`.\n * This function is called when the remote config is fetched.\n */\ntype RemoteConfigCallback = (remoteConfig: RemoteConfig | null, source: Source, lastFetch: Date) => void;\n\nexport interface IRemoteConfigClient {\n  /**\n   * Subscribe for updates to remote config.\n   * Callback is guaranteed to be called at least once,\n   * Whether we are able to fetch a config or not.\n   *\n   * @param key - a string containing a series of period delimited keys to filter the returned config.\n   * Ie, {a: {b: {c: ...}}} would return {b: {c: ...}} for \"a\" or {c: ...} for \"a.b\".\n   * Set to `undefined` to subscribe all keys.\n   * @param deliveryMode - how the initial callback is sent.\n   * @param callback - a block that will be called when remote config is fetched.\n   * @return id - identification of the subscribe and can be used to unsubscribe from updates.\n   */\n  subscribe(key: string | undefined, deliveryMode: DeliveryMode, callback: RemoteConfigCallback): string;\n\n  /**\n   * Unsubscribe a callback from receiving future updates.\n   *\n   * @param id - identification of the callback that you want to unsubscribe.\n   * It's the return value of subscribe().\n   * @return boolean - whether the callback is removed.\n   */\n  unsubscribe(id: string): boolean;\n\n  /**\n   * Request the remote config client to fetch from remote, update cache, and callback.\n   */\n  updateConfigs(): void;\n}\n\nexport class RemoteConfigClient implements IRemoteConfigClient {\n  readonly apiKey: string;\n  readonly serverUrl: string;\n  readonly logger: ILogger;\n  readonly storage: RemoteConfigStorage;\n  // Registered callbackInfos by subscribe().\n  callbackInfos: CallbackInfo[] = [];\n\n  constructor(apiKey: string, logger: ILogger, serverZone: ServerZoneType = 'US') {\n    this.apiKey = apiKey;\n    this.serverUrl = serverZone === 'US' ? US_SERVER_URL : EU_SERVER_URL;\n    this.logger = logger;\n    this.storage = new RemoteConfigLocalStorage(apiKey, logger);\n  }\n\n  subscribe(key: string | undefined, deliveryMode: DeliveryMode, callback: RemoteConfigCallback): string {\n    const id = UUID();\n    const callbackInfo = {\n      id: id,\n      key: key,\n      deliveryMode: deliveryMode,\n      callback: callback,\n    };\n    this.callbackInfos.push(callbackInfo);\n\n    if (deliveryMode === 'all') {\n      void this.subscribeAll(callbackInfo);\n    } else {\n      void this.subscribeWaitForRemote(callbackInfo, deliveryMode.timeout);\n    }\n\n    return id;\n  }\n\n  unsubscribe(id: string): boolean {\n    const index = this.callbackInfos.findIndex((callbackInfo) => callbackInfo.id === id);\n    if (index === -1) {\n      this.logger.debug(`Remote config client unsubscribe failed because callback with id ${id} doesn't exist.`);\n      return false;\n    }\n\n    this.callbackInfos.splice(index, 1);\n    this.logger.debug(`Remote config client unsubscribe succeeded removing callback with id ${id}.`);\n    return true;\n  }\n\n  async updateConfigs() {\n    const result = await this.fetch();\n    void this.storage.setConfig(result);\n    this.callbackInfos.forEach((callbackInfo) => {\n      this.sendCallback(callbackInfo, result, 'remote');\n    });\n  }\n\n  /**\n   * Send remote first. If it's already complete, we can skip the cached response.\n   * - if remote is fetched first, no cache fetch.\n   * - if cache is fetched first, still fetching remote.\n   */\n  async subscribeAll(callbackInfo: CallbackInfo) {\n    const remotePromise = this.fetch().then((result) => {\n      this.logger.debug('Remote config client subscription all mode fetched from remote.');\n      this.sendCallback(callbackInfo, result, 'remote');\n      void this.storage.setConfig(result);\n    });\n\n    const cachePromise = this.storage.fetchConfig().then((result) => {\n      return result;\n    });\n\n    // Wait for the first result to resolve\n    const result = await Promise.race([remotePromise, cachePromise]);\n\n    // If cache is fetched first, wait for remote.\n    if (result !== undefined) {\n      this.logger.debug('Remote config client subscription all mode fetched from cache.');\n      this.sendCallback(callbackInfo, result, 'cache');\n    }\n    await remotePromise;\n  }\n\n  /**\n   * Waits for a remote response until the given timeout, then return a cached copy, if available.\n   */\n  async subscribeWaitForRemote(callbackInfo: CallbackInfo, timeout: number) {\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject('Timeout exceeded');\n      }, timeout);\n    });\n\n    try {\n      const result: RemoteConfigInfo = (await Promise.race([this.fetch(), timeoutPromise])) as RemoteConfigInfo;\n\n      this.logger.debug('Remote config client subscription wait for remote mode returns from remote.');\n      this.sendCallback(callbackInfo, result, 'remote');\n      void this.storage.setConfig(result);\n    } catch (error) {\n      this.logger.debug(\n        'Remote config client subscription wait for remote mode exceeded timeout. Try to fetch from cache.',\n      );\n      const result = await this.storage.fetchConfig();\n      if (result.remoteConfig !== null) {\n        this.logger.debug('Remote config client subscription wait for remote mode returns a cached copy.');\n        this.sendCallback(callbackInfo, result, 'cache');\n      } else {\n        this.logger.debug('Remote config client subscription wait for remote mode failed to fetch cache.');\n        this.sendCallback(callbackInfo, result, 'remote');\n      }\n    }\n  }\n\n  /**\n   * Call the callback with filtered remote config based on key.\n   * @param remoteConfigInfo - the whole remote config object without filtering by key.\n   */\n  sendCallback(callbackInfo: CallbackInfo, remoteConfigInfo: RemoteConfigInfo, source: Source) {\n    callbackInfo.lastCallback = new Date();\n\n    let filteredConfig: RemoteConfig | null;\n    if (callbackInfo.key) {\n      // Filter remote config by key.\n      // For example, if remote config is {a: {b: {c: 1}}},\n      // if key = 'a', filter result is {b: {c: 1}};\n      // if key = 'a.b', filter result is {c: 1}\n      filteredConfig = callbackInfo.key.split('.').reduce((config, key) => {\n        if (config === null) {\n          return config;\n        }\n\n        return key in config ? (config[key] as RemoteConfig) : null;\n      }, remoteConfigInfo.remoteConfig);\n    } else {\n      filteredConfig = remoteConfigInfo.remoteConfig;\n    }\n\n    callbackInfo.callback(filteredConfig, source, remoteConfigInfo.lastFetch);\n  }\n\n  async fetch(retries: number = DEFAULT_MAX_RETRIES, timeout: number = DEFAULT_TIMEOUT): Promise<RemoteConfigInfo> {\n    const interval = timeout / retries;\n    const failedRemoteConfigInfo: RemoteConfigInfo = {\n      remoteConfig: null,\n      lastFetch: new Date(),\n    };\n\n    for (let attempt = 0; attempt < retries; attempt++) {\n      try {\n        const res = await fetch(this.getUrlParams(), {\n          method: 'GET',\n          headers: {\n            Accept: '*/*',\n          },\n        });\n\n        // Handle unsuccessful fetch\n        if (!res.ok) {\n          const body = await res.text();\n          this.logger.debug(`Remote config client fetch with retry time ${retries} failed with ${res.status}: ${body}`);\n        } else {\n          // Handle successful fetch\n          const remoteConfig: RemoteConfig = (await res.json()) as RemoteConfig;\n          return {\n            remoteConfig: remoteConfig,\n            lastFetch: new Date(),\n          };\n        }\n      } catch (error) {\n        // Handle rejects when the request fails, for example, a network error\n        this.logger.debug(`Remote config client fetch with retry time ${retries} is rejected because: `, error);\n      }\n\n      // Linear backoff:\n      // wait for the specified interval before the next attempt\n      // except after the last attempt.\n      if (attempt < retries - 1) {\n        await new Promise((resolve) => setTimeout(resolve, this.getJitterDelay(interval)));\n      }\n    }\n\n    return failedRemoteConfigInfo;\n  }\n\n  /**\n   * Return jitter in the bound of [0,baseDelay) and then floor round.\n   */\n  getJitterDelay(baseDelay: number): number {\n    return Math.floor(Math.random() * baseDelay);\n  }\n\n  getUrlParams(): string {\n    const urlParams = new URLSearchParams({\n      api_key: this.apiKey,\n    });\n    FETCHED_KEYS.forEach((key) => {\n      urlParams.append('config_keys', key);\n    });\n\n    return `${this.serverUrl}?${urlParams.toString()}`;\n  }\n}\n"]}