{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/plugin.ts"],"names":[],"mappings":"","sourcesContent":["import { Event } from './event';\nimport { Config } from './config';\nimport { Result } from './result';\nimport { CoreClient } from './client/core-client';\n\ntype PluginTypeBefore = 'before';\ntype PluginTypeEnrichment = 'enrichment';\ntype PluginTypeDestination = 'destination';\nexport type PluginType = PluginTypeBefore | PluginTypeEnrichment | PluginTypeDestination;\n\ninterface PluginBase<T = CoreClient, U = Config> {\n  name?: string;\n  type?: PluginType;\n  setup?(config: U, client: T): Promise<void>;\n  teardown?(): Promise<void>;\n}\n\nexport interface BeforePlugin<T = CoreClient, U = Config> extends PluginBase<T, U> {\n  type: PluginTypeBefore;\n  execute?(context: Event): Promise<Event | null>;\n}\n\nexport interface EnrichmentPlugin<T = CoreClient, U = Config> extends PluginBase<T, U> {\n  type?: PluginTypeEnrichment;\n  execute?(context: Event): Promise<Event | null>;\n}\n\nexport interface DestinationPlugin<T = CoreClient, U = Config> extends PluginBase<T, U> {\n  type: PluginTypeDestination;\n  execute(context: Event): Promise<Result>;\n  flush?(): Promise<void>;\n}\n\nexport type Plugin<T = CoreClient, U = Config> = BeforePlugin<T, U> | EnrichmentPlugin<T, U> | DestinationPlugin<T, U>;\n"]}