{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Config } from '@amplitude/analytics-types';\n\nexport interface RemoteConfigAPIResponse<RemoteConfig extends { [key: string]: object }> {\n  configs: {\n    [key: string]: RemoteConfig;\n  };\n}\n\nexport interface BaseRemoteConfigFetch<T> {\n  getRemoteConfig: <K extends keyof T>(\n    configNamespace: string,\n    key: K,\n    sessionId?: number,\n  ) => Promise<T[K] | undefined>;\n}\n\nexport interface RemoteConfigFetch<T> extends BaseRemoteConfigFetch<T> {\n  // Each metric is independent. See RemoteConfigMetric for more information.\n  metrics: RemoteConfigMetric;\n}\n\nexport interface RemoteConfigMetric {\n  // The time, in milliseconds, taken to fetch the last remote config via getRemoteConfig() from API.\n  // If multiple remote config fetches occur, this value will be updated to reflect the time of the most recent fetch.\n  fetchTimeAPISuccess?: number;\n  // The time, in milliseconds, taken to fetch the last remote config via getRemoteConfig() from API\n  // but failed because of exceeding max retry or an error.\n  // If multiple remote config fetches occur, this value will be updated to reflect the time of the most recent fetch.\n  fetchTimeAPIFail?: number;\n}\n\nexport interface RemoteConfigIDBStore<RemoteConfig extends { [key: string]: object }>\n  extends BaseRemoteConfigFetch<RemoteConfig> {\n  storeRemoteConfig: (remoteConfig: RemoteConfigAPIResponse<RemoteConfig>, sessionId?: number) => Promise<void>;\n  getLastFetchedSessionId: () => Promise<number | void>;\n  remoteConfigHasValues: (configNamespace: string) => Promise<boolean>;\n}\n\nexport type CreateRemoteConfigFetch = <RemoteConfig extends { [key: string]: object }>({\n  localConfig,\n  configKeys,\n}: {\n  localConfig: Config;\n  configKeys: string[];\n}) => Promise<RemoteConfigFetch<RemoteConfig>>;\n"]}