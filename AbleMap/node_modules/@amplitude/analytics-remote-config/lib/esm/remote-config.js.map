{"version":3,"file":"remote-config.js","sourceRoot":"","sources":["../../src/remote-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseTransport } from '@amplitude/analytics-core';\nimport { Config, ServerZone, Status } from '@amplitude/analytics-types';\nimport {\n  CreateRemoteConfigFetch,\n  RemoteConfigFetch as IRemoteConfigFetch,\n  RemoteConfigAPIResponse,\n  RemoteConfigMetric,\n} from './types';\n\nconst UNEXPECTED_NETWORK_ERROR_MESSAGE = 'Network error occurred, remote config fetch failed';\nconst SUCCESS_REMOTE_CONFIG = 'Remote config successfully fetched';\nconst MAX_RETRIES_EXCEEDED_MESSAGE = 'Remote config fetch rejected due to exceeded retry count';\nconst TIMEOUT_MESSAGE = 'Remote config fetch rejected due to timeout after 5 seconds';\nconst UNEXPECTED_ERROR_MESSAGE = 'Unexpected error occurred';\n\nexport const REMOTE_CONFIG_SERVER_URL = 'https://sr-client-cfg.amplitude.com/config';\nexport const REMOTE_CONFIG_SERVER_URL_STAGING = 'https://sr-client-cfg.stag2.amplitude.com/config';\nexport const REMOTE_CONFIG_SERVER_URL_EU = 'https://sr-client-cfg.eu.amplitude.com/config';\n\nexport class RemoteConfigFetch<RemoteConfig extends { [key: string]: object }>\n  implements IRemoteConfigFetch<RemoteConfig>\n{\n  localConfig: Config;\n  retryTimeout = 1000;\n  attempts = 0;\n  lastFetchedSessionId: number | undefined;\n  sessionTargetingMatch = false;\n  configKeys: string[];\n  metrics: RemoteConfigMetric = {};\n\n  constructor({ localConfig, configKeys }: { localConfig: Config; configKeys: string[] }) {\n    this.localConfig = localConfig;\n    this.configKeys = configKeys;\n  }\n\n  getRemoteConfig = async <K extends keyof RemoteConfig>(\n    configNamespace: string,\n    key: K,\n    sessionId?: number,\n  ): Promise<RemoteConfig[K] | undefined> => {\n    const fetchStartTime = Date.now();\n    // Finally fetch via API\n    const configAPIResponse = await this.fetchWithTimeout(sessionId);\n    if (configAPIResponse) {\n      const remoteConfig = configAPIResponse.configs && configAPIResponse.configs[configNamespace];\n      if (remoteConfig) {\n        this.metrics.fetchTimeAPISuccess = Date.now() - fetchStartTime;\n        return remoteConfig[key];\n      }\n    }\n    this.metrics.fetchTimeAPIFail = Date.now() - fetchStartTime;\n    return undefined;\n  };\n\n  getServerUrl() {\n    if (this.localConfig.serverZone === ServerZone.STAGING) {\n      return REMOTE_CONFIG_SERVER_URL_STAGING;\n    }\n\n    if (this.localConfig.serverZone === ServerZone.EU) {\n      return REMOTE_CONFIG_SERVER_URL_EU;\n    }\n\n    return REMOTE_CONFIG_SERVER_URL;\n  }\n\n  fetchWithTimeout = async (sessionId?: number): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const remoteConfig = await this.fetchRemoteConfig(controller.signal, sessionId);\n    clearTimeout(timeoutId);\n    return remoteConfig;\n  };\n\n  fetchRemoteConfig = async (\n    signal: AbortController['signal'],\n    sessionId?: number,\n  ): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    if (sessionId === this.lastFetchedSessionId && this.attempts >= this.localConfig.flushMaxRetries) {\n      return this.completeRequest({ err: MAX_RETRIES_EXCEEDED_MESSAGE });\n    } else if (signal.aborted) {\n      return this.completeRequest({ err: TIMEOUT_MESSAGE });\n    } else if (sessionId !== this.lastFetchedSessionId) {\n      this.lastFetchedSessionId = sessionId;\n      this.attempts = 0;\n    }\n\n    try {\n      const urlParams = new URLSearchParams({\n        api_key: this.localConfig.apiKey,\n      });\n      for (const configKey of this.configKeys) {\n        urlParams.append('config_keys', configKey);\n      }\n      if (sessionId) {\n        urlParams.set('session_id', String(sessionId));\n      }\n      const options: RequestInit = {\n        headers: {\n          Accept: '*/*',\n        },\n        method: 'GET',\n      };\n      const serverUrl = `${this.getServerUrl()}?${urlParams.toString()}`;\n      this.attempts += 1;\n      const res = await fetch(serverUrl, { ...options, signal: signal });\n      if (res === null) {\n        return this.completeRequest({ err: UNEXPECTED_ERROR_MESSAGE });\n      }\n      const parsedStatus = new BaseTransport().buildStatus(res.status);\n      switch (parsedStatus) {\n        case Status.Success:\n          this.attempts = 0;\n          return this.parseAndStoreConfig(res);\n        case Status.Failed:\n          return this.retryFetch(signal, sessionId);\n        default:\n          return this.completeRequest({ err: UNEXPECTED_NETWORK_ERROR_MESSAGE });\n      }\n    } catch (e) {\n      const knownError = e as Partial<Error>;\n      if (signal.aborted) {\n        return this.completeRequest({ err: TIMEOUT_MESSAGE });\n      }\n      return this.completeRequest({ err: knownError.message ?? UNEXPECTED_ERROR_MESSAGE });\n    }\n  };\n\n  retryFetch = async (\n    signal: AbortController['signal'],\n    sessionId?: number,\n  ): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    await new Promise((resolve) => setTimeout(resolve, this.attempts * this.retryTimeout));\n    return this.fetchRemoteConfig(signal, sessionId);\n  };\n\n  parseAndStoreConfig = async (res: Response): Promise<RemoteConfigAPIResponse<RemoteConfig>> => {\n    const remoteConfig: RemoteConfigAPIResponse<RemoteConfig> =\n      (await res.json()) as RemoteConfigAPIResponse<RemoteConfig>;\n    this.completeRequest({ success: SUCCESS_REMOTE_CONFIG });\n    return remoteConfig;\n  };\n\n  completeRequest({ err, success }: { err?: string; success?: string }) {\n    if (err) {\n      throw new Error(err);\n    } else if (success) {\n      this.localConfig.loggerProvider.log(success);\n    }\n  }\n}\n\nexport const createRemoteConfigFetch: CreateRemoteConfigFetch = async <\n  RemoteConfig extends { [Property in keyof RemoteConfig]: RemoteConfig[Property] },\n>({\n  localConfig,\n  configKeys,\n}: {\n  localConfig: Config;\n  configKeys: string[];\n}) => {\n  return new RemoteConfigFetch<RemoteConfig>({ localConfig, configKeys });\n};\n"]}