{"version":3,"file":"web-attribution.js","sourceRoot":"","sources":["../../../src/attribution/web-attribution.ts"],"names":[],"mappings":";;;;AAEA,qCAAqG;AACrG,8CAAmD;AACnD,qDAAmD;AACnD,yCAA4C;AAC5C,sCAA0C;AAE1C;IAWE,wBAAY,OAAgB,EAAE,MAAqB;;QALnD,2BAAsB,GAAG,KAAK,CAAC;QAM7B,IAAI,CAAC,OAAO,sBACV,iBAAiB,EAAE,OAAO,EAC1B,yBAAyB,EAAE,KAAK,EAChC,gBAAgB,EAAE,IAAA,qCAA2B,EAAC,MAAA,MAAM,CAAC,aAAa,0CAAE,MAAM,CAAC,IACxE,OAAO,CACX,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,aAA6C,CAAC;QACpE,IAAI,CAAC,UAAU,GAAG,IAAA,uBAAa,EAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACvD,IAAI,CAAC,eAAe,GAAG,yBAAa,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC;QACpC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACpE,CAAC;IAEK,6BAAI,GAAV;;;;;;4BACkD,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;wBAA1E,KAAA,8BAAgD,SAA0B,KAAA,EAAzE,IAAI,CAAC,eAAe,QAAA,EAAE,IAAI,CAAC,gBAAgB,QAAA,CAA+B;wBACrE,mBAAmB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAA,sBAAY,EAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;6BAE3G,IAAA,uBAAa,EAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,mBAAmB,CAAC,EAA1G,wBAA0G;wBAC5G,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;wBACnC,qBAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,EAAA;;wBAA7D,SAA6D,CAAC;;;;;;KAEjE;IAEK,sCAAa,GAAnB;;;;4BACS,qBAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,gCAAc,EAAE,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAA;4BAA3F,sBAAO,SAAoF,EAAC;;;;KAC7F;IAED;;;;OAIG;IACH,8CAAqB,GAArB,UAAsB,QAAiB;QACrC,sCAAsC;QACtC,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACpC,IAAM,aAAa,GAAG,IAAA,6BAAmB,EAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9E,IAAI,QAAQ,EAAE;YACZ,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;SACnC;QACD,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,wDAA+B,GAA/B;QACE,OAAO,IAAI,CAAC,sBAAsB,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC;IACjF,CAAC;IACH,qBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,wCAAc","sourcesContent":["import { BrowserConfig, Logger } from '@amplitude/analytics-types';\nimport { Campaign, Storage } from '@amplitude/analytics-types';\nimport { Options, getDefaultExcludedReferrers, createCampaignEvent, isNewCampaign } from './helpers';\nimport { getStorageKey } from '../storage/helpers';\nimport { CampaignParser } from './campaign-parser';\nimport { BASE_CAMPAIGN } from './constants';\nimport { isNewSession } from '../session';\n\nexport class WebAttribution {\n  options: Options;\n  storage: Storage<Campaign>;\n  storageKey: string;\n  previousCampaign?: Campaign;\n  currentCampaign: Campaign;\n  shouldTrackNewCampaign = false;\n  sessionTimeout: number;\n  lastEventTime?: number;\n  logger: Logger;\n\n  constructor(options: Options, config: BrowserConfig) {\n    this.options = {\n      initialEmptyValue: 'EMPTY',\n      resetSessionOnNewCampaign: false,\n      excludeReferrers: getDefaultExcludedReferrers(config.cookieOptions?.domain),\n      ...options,\n    };\n    this.storage = config.cookieStorage as unknown as Storage<Campaign>;\n    this.storageKey = getStorageKey(config.apiKey, 'MKTG');\n    this.currentCampaign = BASE_CAMPAIGN;\n    this.sessionTimeout = config.sessionTimeout;\n    this.lastEventTime = config.lastEventTime;\n    this.logger = config.loggerProvider;\n    config.loggerProvider.log('Installing web attribution tracking.');\n  }\n\n  async init() {\n    [this.currentCampaign, this.previousCampaign] = await this.fetchCampaign();\n    const isEventInNewSession = !this.lastEventTime ? true : isNewSession(this.sessionTimeout, this.lastEventTime);\n\n    if (isNewCampaign(this.currentCampaign, this.previousCampaign, this.options, this.logger, isEventInNewSession)) {\n      this.shouldTrackNewCampaign = true;\n      await this.storage.set(this.storageKey, this.currentCampaign);\n    }\n  }\n\n  async fetchCampaign() {\n    return await Promise.all([new CampaignParser().parse(), this.storage.get(this.storageKey)]);\n  }\n\n  /**\n   * This can be called when enable web attribution and either\n   * 1. set a new session\n   * 2. has new campaign and enable resetSessionOnNewCampaign\n   */\n  generateCampaignEvent(event_id?: number) {\n    // Mark this campaign has been tracked\n    this.shouldTrackNewCampaign = false;\n    const campaignEvent = createCampaignEvent(this.currentCampaign, this.options);\n    if (event_id) {\n      campaignEvent.event_id = event_id;\n    }\n    return campaignEvent;\n  }\n\n  shouldSetSessionIdOnNewCampaign() {\n    return this.shouldTrackNewCampaign && !!this.options.resetSessionOnNewCampaign;\n  }\n}\n"]}