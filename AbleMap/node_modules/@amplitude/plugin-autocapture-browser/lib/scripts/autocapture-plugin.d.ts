import { BrowserClient, BrowserConfig, EnrichmentPlugin, ElementInteractionsOptions } from '@amplitude/analytics-core';
import { Observable } from 'rxjs';
import { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';
declare global {
    interface Window {
        navigation: HasEventTargetAddRemove<Event>;
    }
}
interface NavigateEvent extends Event {
    readonly navigationType: 'reload' | 'push' | 'replace' | 'traverse';
    readonly destination: {
        readonly url: string;
        readonly key: string | null;
        readonly id: string | null;
        readonly index: number;
        readonly sameDocument: boolean;
        getState(): any;
    };
    readonly canIntercept: boolean;
    readonly userInitiated: boolean;
    readonly hashChange: boolean;
    readonly signal: AbortSignal;
    readonly formData: FormData | null;
    readonly downloadRequest: string | null;
    readonly info: any;
    readonly hasUAVisualTransition: boolean;
    /** @see https://github.com/WICG/navigation-api/pull/264 */
    readonly sourceElement: Element | null;
    scroll(): void;
}
type BrowserEnrichmentPlugin = EnrichmentPlugin<BrowserClient, BrowserConfig>;
export type AutoCaptureOptionsWithDefaults = Required<Pick<ElementInteractionsOptions, 'debounceTime' | 'cssSelectorAllowlist' | 'actionClickAllowlist'>> & ElementInteractionsOptions;
export declare enum ObservablesEnum {
    ClickObservable = "clickObservable",
    ChangeObservable = "changeObservable",
    NavigateObservable = "navigateObservable",
    MutationObservable = "mutationObservable"
}
type BaseTimestampedEvent<T> = {
    event: T;
    timestamp: number;
    type: 'rage' | 'click' | 'change' | 'error' | 'navigate' | 'mutation';
};
export type ElementBasedEvent = MouseEvent | Event;
export type ElementBasedTimestampedEvent<T> = BaseTimestampedEvent<T> & {
    event: MouseEvent | Event;
    type: 'click' | 'change';
    closestTrackedAncestor: Element;
    targetElementProperties: Record<string, any>;
};
export type TimestampedEvent<T> = BaseTimestampedEvent<T> | ElementBasedTimestampedEvent<T>;
export interface AllWindowObservables {
    [ObservablesEnum.ClickObservable]: Observable<ElementBasedTimestampedEvent<MouseEvent>>;
    [ObservablesEnum.ChangeObservable]: Observable<ElementBasedTimestampedEvent<Event>>;
    [ObservablesEnum.NavigateObservable]: Observable<TimestampedEvent<NavigateEvent>> | undefined;
    [ObservablesEnum.MutationObservable]: Observable<TimestampedEvent<MutationRecord[]>>;
}
export declare function isElementBasedEvent<T>(event: BaseTimestampedEvent<T>): event is ElementBasedTimestampedEvent<T>;
export declare const autocapturePlugin: (options?: ElementInteractionsOptions) => BrowserEnrichmentPlugin;
export {};
//# sourceMappingURL=autocapture-plugin.d.ts.map