import { ElementInteractionsOptions, ActionType } from '@amplitude/analytics-core';
import { ElementBasedEvent, ElementBasedTimestampedEvent } from './autocapture-plugin';
export type JSONValue = string | number | boolean | null | {
    [x: string]: JSONValue;
} | Array<JSONValue>;
export type shouldTrackEvent = (actionType: ActionType, element: Element) => boolean;
export declare const createShouldTrackEvent: (autocaptureOptions: ElementInteractionsOptions, allowlist: string[]) => shouldTrackEvent;
export declare const isNonSensitiveString: (text: string | null) => boolean;
export declare const isTextNode: (node: Node) => boolean;
export declare const isNonSensitiveElement: (element: Element) => boolean;
export declare const getText: (element: Element) => string;
export declare const isPageUrlAllowed: (url: string, pageUrlAllowlist: (string | RegExp)[] | undefined) => boolean;
export declare const getAttributesWithPrefix: (element: Element, prefix: string) => {
    [key: string]: string;
};
export declare const isEmpty: (value: unknown) => boolean;
export declare const removeEmptyProperties: (properties: {
    [key: string]: unknown;
}) => {
    [key: string]: unknown;
};
export declare const getNearestLabel: (element: Element) => string;
export declare const querySelectUniqueElements: (root: Element | Document, selectors: string[]) => Element[];
export declare const getClosestElement: (element: Element | null, selectors: string[]) => Element | null;
export declare const getEventTagProps: (element: Element) => {
    [key: string]: unknown;
};
export declare const asyncLoadScript: (url: string) => Promise<unknown>;
export declare function generateUniqueId(): string;
export declare const filterOutNonTrackableEvents: (event: ElementBasedTimestampedEvent<ElementBasedEvent>) => boolean;
//# sourceMappingURL=helpers.d.ts.map