"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autocapturePlugin = exports.isElementBasedEvent = exports.ObservablesEnum = void 0;
var tslib_1 = require("tslib");
/* eslint-disable no-restricted-globals */
var analytics_core_1 = require("@amplitude/analytics-core");
var constants = tslib_1.__importStar(require("./constants"));
var rxjs_1 = require("rxjs");
var helpers_1 = require("./helpers");
var messenger_1 = require("./libs/messenger");
var hierarchy_1 = require("./hierarchy");
var track_click_1 = require("./autocapture/track-click");
var track_change_1 = require("./autocapture/track-change");
var track_action_click_1 = require("./autocapture/track-action-click");
var ObservablesEnum;
(function (ObservablesEnum) {
    ObservablesEnum["ClickObservable"] = "clickObservable";
    ObservablesEnum["ChangeObservable"] = "changeObservable";
    // ErrorObservable = 'errorObservable',
    ObservablesEnum["NavigateObservable"] = "navigateObservable";
    ObservablesEnum["MutationObservable"] = "mutationObservable";
})(ObservablesEnum = exports.ObservablesEnum || (exports.ObservablesEnum = {}));
// Type predicate
function isElementBasedEvent(event) {
    return event.type === 'click' || event.type === 'change';
}
exports.isElementBasedEvent = isElementBasedEvent;
var autocapturePlugin = function (options) {
    var _a, _b, _c;
    if (options === void 0) { options = {}; }
    var _d = options.dataAttributePrefix, dataAttributePrefix = _d === void 0 ? analytics_core_1.DEFAULT_DATA_ATTRIBUTE_PREFIX : _d, _e = options.visualTaggingOptions, visualTaggingOptions = _e === void 0 ? {
        enabled: true,
        messenger: new messenger_1.WindowMessenger(),
    } : _e;
    options.cssSelectorAllowlist = (_a = options.cssSelectorAllowlist) !== null && _a !== void 0 ? _a : analytics_core_1.DEFAULT_CSS_SELECTOR_ALLOWLIST;
    options.actionClickAllowlist = (_b = options.actionClickAllowlist) !== null && _b !== void 0 ? _b : analytics_core_1.DEFAULT_ACTION_CLICK_ALLOWLIST;
    options.debounceTime = (_c = options.debounceTime) !== null && _c !== void 0 ? _c : 0; // TODO: update this when rage clicks are added to 1000ms
    var name = constants.PLUGIN_NAME;
    var type = 'enrichment';
    var subscriptions = [];
    // Create observables on events on the window
    var createObservables = function () {
        var _a;
        // Create Observables from direct user events
        var clickObservable = (0, rxjs_1.fromEvent)(document, 'click', { capture: true }).pipe((0, rxjs_1.map)(function (click) { return addAdditionalEventProperties(click, 'click'); }), (0, rxjs_1.share)());
        var changeObservable = (0, rxjs_1.fromEvent)(document, 'change', { capture: true }).pipe((0, rxjs_1.map)(function (change) { return addAdditionalEventProperties(change, 'change'); }), (0, rxjs_1.share)());
        // Create Observable from unhandled errors
        // const errorObservable = fromEvent<ErrorEvent>(window, 'error').pipe(
        //   map((error) => addAdditionalEventProperties(error, 'error')),
        // );
        // Create observable for URL changes
        var navigateObservable;
        /* istanbul ignore next */
        if (window.navigation) {
            navigateObservable = (0, rxjs_1.fromEvent)(window.navigation, 'navigate').pipe((0, rxjs_1.map)(function (navigate) { return addAdditionalEventProperties(navigate, 'navigate'); }), (0, rxjs_1.share)());
        }
        // Track DOM Mutations
        var mutationObservable = new rxjs_1.Observable(function (observer) {
            var mutationObserver = new MutationObserver(function (mutations) {
                observer.next(mutations);
            });
            mutationObserver.observe(document.body, {
                childList: true,
                attributes: true,
                characterData: true,
                subtree: true,
            });
            return function () { return mutationObserver.disconnect(); };
        }).pipe((0, rxjs_1.map)(function (mutation) { return addAdditionalEventProperties(mutation, 'mutation'); }), (0, rxjs_1.share)());
        return _a = {},
            _a[ObservablesEnum.ClickObservable] = clickObservable,
            _a[ObservablesEnum.ChangeObservable] = changeObservable,
            // [ObservablesEnum.ErrorObservable]: errorObservable,
            _a[ObservablesEnum.NavigateObservable] = navigateObservable,
            _a[ObservablesEnum.MutationObservable] = mutationObservable,
            _a;
    };
    // Returns the Amplitude event properties for the given element.
    var getEventProperties = function (actionType, element) {
        var _a;
        var _b, _c;
        /* istanbul ignore next */
        var tag = (_c = (_b = element === null || element === void 0 ? void 0 : element.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase) === null || _c === void 0 ? void 0 : _c.call(_b);
        /* istanbul ignore next */
        var rect = typeof element.getBoundingClientRect === 'function' ? element.getBoundingClientRect() : { left: null, top: null };
        var ariaLabel = element.getAttribute('aria-label');
        var attributes = (0, helpers_1.getAttributesWithPrefix)(element, dataAttributePrefix);
        var nearestLabel = (0, helpers_1.getNearestLabel)(element);
        /* istanbul ignore next */
        var properties = (_a = {},
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_ID] = element.getAttribute('id') || '',
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_CLASS] = element.getAttribute('class'),
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_HIERARCHY] = (0, hierarchy_1.getHierarchy)(element),
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_TAG] = tag,
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_TEXT] = (0, helpers_1.getText)(element),
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_LEFT] = rect.left == null ? null : Math.round(rect.left),
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_TOP] = rect.top == null ? null : Math.round(rect.top),
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_ARIA_LABEL] = ariaLabel,
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_ATTRIBUTES] = attributes,
            _a[constants.AMPLITUDE_EVENT_PROP_ELEMENT_PARENT_LABEL] = nearestLabel,
            _a[constants.AMPLITUDE_EVENT_PROP_PAGE_URL] = window.location.href.split('?')[0],
            _a[constants.AMPLITUDE_EVENT_PROP_PAGE_TITLE] = (typeof document !== 'undefined' && document.title) || '',
            _a[constants.AMPLITUDE_EVENT_PROP_VIEWPORT_HEIGHT] = window.innerHeight,
            _a[constants.AMPLITUDE_EVENT_PROP_VIEWPORT_WIDTH] = window.innerWidth,
            _a);
        if (tag === 'a' && actionType === 'click' && element instanceof HTMLAnchorElement) {
            properties[constants.AMPLITUDE_EVENT_PROP_ELEMENT_HREF] = element.href;
        }
        return (0, helpers_1.removeEmptyProperties)(properties);
    };
    var addAdditionalEventProperties = function (event, type) {
        var baseEvent = {
            event: event,
            timestamp: Date.now(),
            type: type,
        };
        if (isElementBasedEvent(baseEvent) && baseEvent.event.target !== null) {
            // Retrieve additional event properties from the target element
            var closestTrackedAncestor = (0, helpers_1.getClosestElement)(baseEvent.event.target, options.cssSelectorAllowlist);
            if (closestTrackedAncestor) {
                baseEvent.closestTrackedAncestor = closestTrackedAncestor;
                baseEvent.targetElementProperties = getEventProperties(baseEvent.type, closestTrackedAncestor);
            }
            return baseEvent;
        }
        return baseEvent;
    };
    var setup = function (config, amplitude) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var shouldTrackEvent, shouldTrackActionClick, allObservables, clickTrackingSubscription, changeSubscription, actionClickSubscription, allowlist, actionClickAllowlist;
        var _a, _b;
        return tslib_1.__generator(this, function (_c) {
            /* istanbul ignore if */
            if (typeof document === 'undefined') {
                return [2 /*return*/];
            }
            shouldTrackEvent = (0, helpers_1.createShouldTrackEvent)(options, options.cssSelectorAllowlist);
            shouldTrackActionClick = (0, helpers_1.createShouldTrackEvent)(options, options.actionClickAllowlist);
            allObservables = createObservables();
            clickTrackingSubscription = (0, track_click_1.trackClicks)({
                allObservables: allObservables,
                options: options,
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
            });
            subscriptions.push(clickTrackingSubscription);
            changeSubscription = (0, track_change_1.trackChange)({
                allObservables: allObservables,
                getEventProperties: getEventProperties,
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
            });
            subscriptions.push(changeSubscription);
            actionClickSubscription = (0, track_action_click_1.trackActionClick)({
                allObservables: allObservables,
                options: options,
                getEventProperties: getEventProperties,
                amplitude: amplitude,
                shouldTrackEvent: shouldTrackEvent,
                shouldTrackActionClick: shouldTrackActionClick,
            });
            subscriptions.push(actionClickSubscription);
            /* istanbul ignore next */
            (_a = config === null || config === void 0 ? void 0 : config.loggerProvider) === null || _a === void 0 ? void 0 : _a.log("".concat(name, " has been successfully added."));
            // Setup visual tagging selector
            if (window.opener && visualTaggingOptions.enabled) {
                allowlist = options.cssSelectorAllowlist;
                actionClickAllowlist = options.actionClickAllowlist;
                /* istanbul ignore next */
                (_b = visualTaggingOptions.messenger) === null || _b === void 0 ? void 0 : _b.setup(tslib_1.__assign(tslib_1.__assign({ logger: config === null || config === void 0 ? void 0 : config.loggerProvider }, ((config === null || config === void 0 ? void 0 : config.serverZone) && { endpoint: constants.AMPLITUDE_ORIGINS_MAP[config.serverZone] })), { isElementSelectable: (0, helpers_1.createShouldTrackEvent)(options, tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(allowlist), false), tslib_1.__read(actionClickAllowlist), false)), cssSelectorAllowlist: allowlist, actionClickAllowlist: actionClickAllowlist }));
            }
            return [2 /*return*/];
        });
    }); };
    var execute = function (event) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, event];
        });
    }); };
    var teardown = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var subscriptions_1, subscriptions_1_1, subscription;
        var e_1, _a;
        return tslib_1.__generator(this, function (_b) {
            try {
                for (subscriptions_1 = tslib_1.__values(subscriptions), subscriptions_1_1 = subscriptions_1.next(); !subscriptions_1_1.done; subscriptions_1_1 = subscriptions_1.next()) {
                    subscription = subscriptions_1_1.value;
                    subscription.unsubscribe();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (subscriptions_1_1 && !subscriptions_1_1.done && (_a = subscriptions_1.return)) _a.call(subscriptions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return [2 /*return*/];
        });
    }); };
    return {
        name: name,
        type: type,
        setup: setup,
        execute: execute,
        teardown: teardown,
    };
};
exports.autocapturePlugin = autocapturePlugin;
//# sourceMappingURL=autocapture-plugin.js.map