{"version":3,"file":"track-action-click.js","sourceRoot":"","sources":["../../../src/autocapture/track-action-click.ts"],"names":[],"mappings":";;;;AAMA,6BAA2E;AAE3E,sCAA8F;AAC9F,0CAA+D;AAE/D,SAAgB,gBAAgB,CAAC,EAchC;QAbC,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,OAAO,aAAA,EACP,kBAAkB,wBAAA,EAClB,gBAAgB,sBAAA,EAChB,sBAAsB,4BAAA;IASd,IAAA,eAAe,GAA6C,cAAc,gBAA3D,EAAE,kBAAkB,GAAyB,cAAc,mBAAvC,EAAE,kBAAkB,GAAK,cAAc,mBAAnB,CAAoB;IAEnF,IAAM,uBAAuB,GAAG,eAAe,CAAC,IAAI,CAClD,IAAA,aAAM,EAAC,UAAC,KAAK;QACX,oFAAoF;QACpF,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAClE,CAAC,CAAC,EACF,IAAA,UAAG,EAAC,UAAC,KAAK;QACR,oGAAoG;QACpG,IAAM,oBAAoB,GAAG,IAAA,2BAAiB,EAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC5G,KAAK,CAAC,sBAAsB,GAAG,oBAA+B,CAAC;QAE/D,wFAAwF;QACxF,IAAI,KAAK,CAAC,sBAAsB,KAAK,IAAI,EAAE;YACzC,KAAK,CAAC,uBAAuB,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;SAC9F;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,EACF,IAAA,aAAM,EAAC,qCAA2B,CAAC,EACnC,IAAA,aAAM,EAAC,UAAC,UAAU;QAChB,uDAAuD;QACvD,OAAO,sBAAsB,CAAC,OAAO,EAAE,UAAU,CAAC,sBAAsB,CAAC,CAAC;IAC5E,CAAC,CAAC,CACH,CAAC;IAEF,IAAM,iBAAiB,GAEnB,CAAC,kBAAkB,CAAC,CAAC;IACzB,0BAA0B;IAC1B,IAAI,kBAAkB,EAAE;QACtB,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC5C;IACD,IAAM,kBAAkB,GAAG,YAAK,wDAAI,iBAAiB,UAAC,CAAC;IAEvD,IAAM,YAAY,GAAG,uBAAuB,CAAC,IAAI;IAC/C,+HAA+H;IAC/H,oEAAoE;IACpE,IAAA,gBAAS,EAAC,UAAC,KAAK;QACd,OAAA,kBAAkB,CAAC,IAAI,CACrB,IAAA,WAAI,EAAC,CAAC,CAAC,EACP,IAAA,cAAO,EAAC,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,cAAM,OAAA,YAAK,EAAL,CAAK,EAAE,CAAC,EAAE,2EAA2E;QACvH,IAAA,UAAG,EAAC,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC,CACjB;IAJD,CAIC,CACF,CACF,CAAC;IAEF,OAAO,YAAY,CAAC,SAAS,CAAC,UAAC,WAAW;QACxC,0BAA0B;QAC1B,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CACd,2CAA+B,EAC/B,kBAAkB,CAAC,OAAO,EAAG,WAAwD,CAAC,sBAAsB,CAAC,CAC9G,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AApED,4CAoEC","sourcesContent":["import {\n  AllWindowObservables,\n  AutoCaptureOptionsWithDefaults,\n  ElementBasedTimestampedEvent,\n  ObservablesEnum,\n} from 'src/autocapture-plugin';\nimport { filter, map, merge, switchMap, take, timeout, EMPTY } from 'rxjs';\nimport { BrowserClient, ActionType } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, getClosestElement, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_CLICKED_EVENT } from '../constants';\n\nexport function trackActionClick({\n  amplitude,\n  allObservables,\n  options,\n  getEventProperties,\n  shouldTrackEvent,\n  shouldTrackActionClick,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  options: AutoCaptureOptionsWithDefaults;\n  getEventProperties: (actionType: ActionType, element: Element) => Record<string, any>;\n  shouldTrackActionClick: shouldTrackEvent;\n  shouldTrackEvent: shouldTrackEvent;\n}) {\n  const { clickObservable, mutationObservable, navigateObservable } = allObservables;\n\n  const filteredClickObservable = clickObservable.pipe(\n    filter((click) => {\n      // Filter out regularly tracked click events that are already handled in trackClicks\n      return !shouldTrackEvent('click', click.closestTrackedAncestor);\n    }),\n    map((click) => {\n      // overwrite the closestTrackedAncestor with the closest element that is on the actionClickAllowlist\n      const closestActionClickEl = getClosestElement(click.event.target as Element, options.actionClickAllowlist);\n      click.closestTrackedAncestor = closestActionClickEl as Element;\n\n      // overwrite the targetElementProperties with the properties of the closestActionClickEl\n      if (click.closestTrackedAncestor !== null) {\n        click.targetElementProperties = getEventProperties(click.type, click.closestTrackedAncestor);\n      }\n      return click;\n    }),\n    filter(filterOutNonTrackableEvents),\n    filter((clickEvent) => {\n      // Only track change on elements that should be tracked\n      return shouldTrackActionClick('click', clickEvent.closestTrackedAncestor);\n    }),\n  );\n\n  const changeObservables: Array<\n    AllWindowObservables[ObservablesEnum.MutationObservable] | AllWindowObservables[ObservablesEnum.NavigateObservable]\n  > = [mutationObservable];\n  /* istanbul ignore next */\n  if (navigateObservable) {\n    changeObservables.push(navigateObservable);\n  }\n  const mutationOrNavigate = merge(...changeObservables);\n\n  const actionClicks = filteredClickObservable.pipe(\n    // If a mutation occurs within 0.5 seconds of a click event (timeout({ first: 500 })), it emits the original first click event.\n    // take 1 to only limit the action events in case there are multiple\n    switchMap((click) =>\n      mutationOrNavigate.pipe(\n        take(1),\n        timeout({ first: 500, with: () => EMPTY }), // in case of timeout, map to empty to prevent any click from being emitted\n        map(() => click),\n      ),\n    ),\n  );\n\n  return actionClicks.subscribe((actionClick) => {\n    /* istanbul ignore next */\n    amplitude?.track(\n      AMPLITUDE_ELEMENT_CLICKED_EVENT,\n      getEventProperties('click', (actionClick as ElementBasedTimestampedEvent<MouseEvent>).closestTrackedAncestor),\n    );\n  });\n}\n"]}