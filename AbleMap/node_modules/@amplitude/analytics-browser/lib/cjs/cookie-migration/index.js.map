{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/cookie-migration/index.ts"],"names":[],"mappings":";;;;AAAA,4DAAmF;AAE5E,IAAM,kBAAkB,GAAG,UAChC,MAAc,EACd,aAAmC,EACnC,mBAA0B;IAA1B,oCAAA,EAAA,0BAA0B;;;;;;oBAEpB,UAAU,GAAG,IAAA,iCAAgB,EAAC,MAAM,CAAC,CAAC;oBAC5B,qBAAM,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,EAAA;;oBAAhD,OAAO,GAAG,SAAsC;oBACtD,IAAI,CAAC,OAAO,EAAE;wBACZ,sBAAO;gCACL,MAAM,EAAE,KAAK;6BACd,EAAC;qBACH;yBACG,mBAAmB,EAAnB,wBAAmB;oBACrB,qBAAM,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,EAAA;;oBAAtC,SAAsC,CAAC;;;oBAEnC,KAAA,eAAoE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,IAAA,EAArF,QAAQ,QAAA,EAAE,MAAM,QAAA,EAAE,MAAM,QAAA,EAAE,SAAS,QAAA,EAAE,aAAa,QAAA,EAAE,WAAW,QAAA,CAAuB;oBAC7F,sBAAO;4BACL,QAAQ,UAAA;4BACR,MAAM,EAAE,IAAA,cAAM,EAAC,MAAM,CAAC;4BACtB,SAAS,EAAE,IAAA,iBAAS,EAAC,SAAS,CAAC;4BAC/B,WAAW,EAAE,IAAA,iBAAS,EAAC,WAAW,CAAC;4BACnC,aAAa,EAAE,IAAA,iBAAS,EAAC,aAAa,CAAC;4BACvC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC;yBACxB,EAAC;;;;CACH,CAAC;AAxBW,QAAA,kBAAkB,sBAwB7B;AAEK,IAAM,SAAS,GAAG,UAAC,GAAW;IACnC,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IAClC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;QAClB,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AANW,QAAA,SAAS,aAMpB;AAEK,IAAM,MAAM,GAAG,UAAC,KAAc;IACnC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;QAC9B,OAAO,SAAS,CAAC;KAClB;IACD,IAAI;QACF,OAAO,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KAChD;IAAC,WAAM;QACN,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC;AATW,QAAA,MAAM,UASjB","sourcesContent":["import { getOldCookieName, Storage, UserSession } from '@amplitude/analytics-core';\n\nexport const parseLegacyCookies = async (\n  apiKey: string,\n  cookieStorage: Storage<UserSession>,\n  deleteLegacyCookies = true,\n): Promise<UserSession> => {\n  const cookieName = getOldCookieName(apiKey);\n  const cookies = await cookieStorage.getRaw(cookieName);\n  if (!cookies) {\n    return {\n      optOut: false,\n    };\n  }\n  if (deleteLegacyCookies) {\n    await cookieStorage.remove(cookieName);\n  }\n  const [deviceId, userId, optOut, sessionId, lastEventTime, lastEventId] = cookies.split('.');\n  return {\n    deviceId,\n    userId: decode(userId),\n    sessionId: parseTime(sessionId),\n    lastEventId: parseTime(lastEventId),\n    lastEventTime: parseTime(lastEventTime),\n    optOut: Boolean(optOut),\n  };\n};\n\nexport const parseTime = (num: string) => {\n  const integer = parseInt(num, 32);\n  if (isNaN(integer)) {\n    return undefined;\n  }\n  return integer;\n};\n\nexport const decode = (value?: string): string | undefined => {\n  if (!atob || !escape || !value) {\n    return undefined;\n  }\n  try {\n    return decodeURIComponent(escape(atob(value)));\n  } catch {\n    return undefined;\n  }\n};\n"]}