{"version":3,"file":"network-connectivity-checker.js","sourceRoot":"","sources":["../../../src/plugins/network-connectivity-checker.ts"],"names":[],"mappings":";;;;AAAA,4DAAwF;AAQjF,IAAM,gCAAgC,GAAG;IAC9C,IAAM,IAAI,GAAG,2CAA2C,CAAC;IACzD,IAAM,IAAI,GAAG,QAAiB,CAAC;IAC/B,IAAM,WAAW,GAAG,IAAA,+BAAc,GAAE,CAAC;IACrC,IAAI,cAAc,GAAoB,EAAE,CAAC;IAEzC,IAAM,kBAAkB,GAAG,UAAC,IAA0B,EAAE,OAAmB;QACzE,IAAI,WAAW,EAAE;YACf,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5C,cAAc,CAAC,IAAI,CAAC;gBAClB,IAAI,MAAA;gBACJ,OAAO,SAAA;aACR,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;IAEF,IAAM,sBAAsB,GAAG;QAC7B,cAAc,CAAC,OAAO,CAAC,UAAC,EAAiB;gBAAf,IAAI,UAAA,EAAE,OAAO,aAAA;YACrC,IAAI,WAAW,EAAE;gBACf,WAAW,CAAC,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAChD;QACH,CAAC,CAAC,CAAC;QACH,cAAc,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC;IAEF,IAAM,KAAK,GAAG,UAAO,MAAqB,EAAE,SAAwB;;YAClE,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;gBACpC,MAAM,CAAC,cAAc,CAAC,KAAK,CACzB,qFAAqF,CACtF,CAAC;gBACF,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,sBAAO;aACR;YAED,MAAM,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC;YAEnC,kBAAkB,CAAC,QAAQ,EAAE;gBAC3B,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;gBACvE,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,mDAAmD;gBACnD,UAAU,CAAC;oBACT,SAAS,CAAC,KAAK,EAAE,CAAC;gBACpB,CAAC,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,kBAAkB,CAAC,SAAS,EAAE;gBAC5B,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;gBACxE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;YACxB,CAAC,CAAC,CAAC;;;SACJ,CAAC;IAEF,IAAM,QAAQ,GAAG;;YACf,sBAAsB,EAAE,CAAC;;;SAC1B,CAAC;IAEF,OAAO;QACL,IAAI,MAAA;QACJ,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,QAAQ,UAAA;KACT,CAAC;AACJ,CAAC,CAAC;AA7DW,QAAA,gCAAgC,oCA6D3C","sourcesContent":["import { getGlobalScope, BeforePlugin, BrowserClient } from '@amplitude/analytics-core';\nimport { BrowserConfig } from 'src/config';\n\ninterface EventListener {\n  type: 'online' | 'offline';\n  handler: () => void;\n}\n\nexport const networkConnectivityCheckerPlugin = (): BeforePlugin => {\n  const name = '@amplitude/plugin-network-checker-browser';\n  const type = 'before' as const;\n  const globalScope = getGlobalScope();\n  let eventListeners: EventListener[] = [];\n\n  const addNetworkListener = (type: 'online' | 'offline', handler: () => void) => {\n    if (globalScope) {\n      globalScope.addEventListener(type, handler);\n      eventListeners.push({\n        type,\n        handler,\n      });\n    }\n  };\n\n  const removeNetworkListeners = () => {\n    eventListeners.forEach(({ type, handler }) => {\n      if (globalScope) {\n        globalScope.removeEventListener(type, handler);\n      }\n    });\n    eventListeners = [];\n  };\n\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    if (typeof navigator === 'undefined') {\n      config.loggerProvider.debug(\n        'Network connectivity checker plugin is disabled because navigator is not available.',\n      );\n      config.offline = false;\n      return;\n    }\n\n    config.offline = !navigator.onLine;\n\n    addNetworkListener('online', () => {\n      config.loggerProvider.debug('Network connectivity changed to online.');\n      config.offline = false;\n      // Flush immediately will cause ERR_NETWORK_CHANGED\n      setTimeout(() => {\n        amplitude.flush();\n      }, config.flushIntervalMillis);\n    });\n\n    addNetworkListener('offline', () => {\n      config.loggerProvider.debug('Network connectivity changed to offline.');\n      config.offline = true;\n    });\n  };\n\n  const teardown = async () => {\n    removeNetworkListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    teardown,\n  };\n};\n"]}