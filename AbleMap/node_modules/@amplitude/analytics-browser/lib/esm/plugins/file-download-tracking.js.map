{"version":3,"file":"file-download-tracking.js","sourceRoot":"","sources":["../../../src/plugins/file-download-tracking.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,2BAA2B,EAAE,cAAc,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAEpH,OAAO,EAAE,cAAc,EAA0C,MAAM,2BAA2B,CAAC;AAQnG,MAAM,CAAC,IAAM,oBAAoB,GAAG;IAClC,IAAI,QAAsC,CAAC;IAC3C,IAAI,cAAc,GAAoB,EAAE,CAAC;IACzC,IAAM,gBAAgB,GAAG,UAAC,OAAgB,EAAE,IAAa,EAAE,OAAmB;QAC5E,OAAO,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACxC,cAAc,CAAC,IAAI,CAAC;YAClB,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,OAAO,SAAA;SACR,CAAC,CAAC;IACL,CAAC,CAAC;IACF,IAAM,oBAAoB,GAAG;QAC3B,cAAc,CAAC,OAAO,CAAC,UAAC,EAA0B;gBAAxB,OAAO,aAAA,EAAE,IAAI,UAAA,EAAE,OAAO,aAAA;YAC9C,0BAA0B;YAC1B,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,cAAc,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC;IAEF,IAAM,IAAI,GAAG,kDAAkD,CAAC;IAChE,IAAM,IAAI,GAAG,YAAY,CAAC;IAE1B,IAAM,KAAK,GAAG,UAAO,MAAqB,EAAE,SAAwB;;;YAC5D,8BAA8B,GAAG;gBACrC,wBAAwB;gBACxB,IAAI,CAAC,SAAS,EAAE;oBACd,qEAAqE;oBACrE,MAAM,CAAC,cAAc,CAAC,IAAI,CACxB,wHAAwH,CACzH,CAAC;oBACF,OAAO;iBACR;gBAED,wBAAwB;gBACxB,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;oBACnC,OAAO;iBACR;gBAED,IAAM,uBAAuB,GAAG,UAAC,CAAoB;oBACnD,IAAI,GAAQ,CAAC;oBACb,IAAI;wBACF,iDAAiD;wBACjD,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;qBAC7C;oBAAC,WAAM;wBACN,0BAA0B;wBAC1B,OAAO;qBACR;oBACD,IAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAClC,IAAM,aAAa,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,CAAC,CAAC,CAAC;oBAElC,IAAI,aAAa,EAAE;wBACjB,gBAAgB,CAAC,CAAC,EAAE,OAAO,EAAE;;4BAC3B,IAAI,aAAa,EAAE;gCACjB,SAAS,CAAC,KAAK,CAAC,2BAA2B;oCACzC,GAAC,cAAc,IAAG,aAAa;oCAC/B,GAAC,SAAS,IAAG,GAAG,CAAC,QAAQ;oCACzB,GAAC,OAAO,IAAG,CAAC,CAAC,EAAE;oCACf,GAAC,SAAS,IAAG,CAAC,CAAC,IAAI;oCACnB,GAAC,QAAQ,IAAG,CAAC,CAAC,IAAI;wCAClB,CAAC;6BACJ;wBACH,CAAC,CAAC,CAAC;qBACJ;gBACH,CAAC,CAAC;gBAEF,IAAM,GAAG,GACP,sHAAsH,CAAC;gBAEzH,wCAAwC;gBACxC,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7D,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;gBAEvC,wDAAwD;gBACxD,0BAA0B;gBAC1B,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;oBAC3C,QAAQ,GAAG,IAAI,gBAAgB,CAAC,UAAC,SAAS;wBACxC,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;4BACzB,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,IAAI;gCAC/B,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE;oCACzB,uBAAuB,CAAC,IAAyB,CAAC,CAAC;iCACpD;gCACD,IAAI,kBAAkB,IAAI,IAAI,IAAI,OAAO,IAAI,CAAC,gBAAgB,KAAK,UAAU,EAAE;oCAC7E,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAwB,CAAC,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;iCAC5F;4BACH,CAAC,CAAC,CAAC;wBACL,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE;wBAC9B,OAAO,EAAE,IAAI;wBACb,SAAS,EAAE,IAAI;qBAChB,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;YAEF,6DAA6D;YAC7D,yBAAyB;YACzB,IAAI,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;gBACtC,8BAA8B,EAAE,CAAC;aAClC;iBAAM;gBAEC,WAAS,cAAc,EAAE,CAAC;gBAChC,yBAAyB;gBACzB,IAAI,QAAM,EAAE;oBACV,QAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,8BAA8B,CAAC,CAAC;iBACjE;qBAAM;oBACL,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,sEAAsE,CAAC,CAAC;iBACrG;aACF;;;SACF,CAAC;IAEF,IAAM,OAAO,GAAG,UAAO,KAAY;QAAK,sBAAA,KAAK,EAAA;aAAA,CAAC;IAC9C,IAAM,QAAQ,GAAG;;YACf,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,EAAE,CAAC;YACvB,oBAAoB,EAAE,CAAC;;;SACxB,CAAC;IAEF,OAAO;QACL,IAAI,MAAA;QACJ,IAAI,MAAA;QACJ,KAAK,OAAA;QACL,OAAO,SAAA;QACP,QAAQ,UAAA;KACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { DEFAULT_FILE_DOWNLOAD_EVENT, FILE_EXTENSION, FILE_NAME, LINK_ID, LINK_TEXT, LINK_URL } from '../constants';\nimport { BrowserConfig } from '../config';\nimport { getGlobalScope, Event, EnrichmentPlugin, BrowserClient } from '@amplitude/analytics-core';\n\ninterface EventListener {\n  element: Element;\n  type: 'click';\n  handler: () => void;\n}\n\nexport const fileDownloadTracking = (): EnrichmentPlugin => {\n  let observer: MutationObserver | undefined;\n  let eventListeners: EventListener[] = [];\n  const addEventListener = (element: Element, type: 'click', handler: () => void) => {\n    element.addEventListener(type, handler);\n    eventListeners.push({\n      element,\n      type,\n      handler,\n    });\n  };\n  const removeClickListeners = () => {\n    eventListeners.forEach(({ element, type, handler }) => {\n      /* istanbul ignore next */\n      element?.removeEventListener(type, handler);\n    });\n    eventListeners = [];\n  };\n\n  const name = '@amplitude/plugin-file-download-tracking-browser';\n  const type = 'enrichment';\n\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    const initializeFileDownloadTracking = () => {\n      /* istanbul ignore if */\n      if (!amplitude) {\n        // TODO: Add required minimum version of @amplitude/analytics-browser\n        config.loggerProvider.warn(\n          'File download tracking requires a later version of @amplitude/analytics-browser. File download events are not tracked.',\n        );\n        return;\n      }\n\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') {\n        return;\n      }\n\n      const addFileDownloadListener = (a: HTMLAnchorElement) => {\n        let url: URL;\n        try {\n          // eslint-disable-next-line no-restricted-globals\n          url = new URL(a.href, window.location.href);\n        } catch {\n          /* istanbul ignore next */\n          return;\n        }\n        const result = ext.exec(url.href);\n        const fileExtension = result?.[1];\n\n        if (fileExtension) {\n          addEventListener(a, 'click', () => {\n            if (fileExtension) {\n              amplitude.track(DEFAULT_FILE_DOWNLOAD_EVENT, {\n                [FILE_EXTENSION]: fileExtension,\n                [FILE_NAME]: url.pathname,\n                [LINK_ID]: a.id,\n                [LINK_TEXT]: a.text,\n                [LINK_URL]: a.href,\n              });\n            }\n          });\n        }\n      };\n\n      const ext =\n        /\\.(pdf|xlsx?|docx?|txt|rtf|csv|exe|key|pp(s|t|tx)|7z|pkg|rar|gz|zip|avi|mov|mp4|mpe?g|wmv|midi?|mp3|wav|wma)(\\?.+)?$/;\n\n      // Adds listener to existing anchor tags\n      const links = Array.from(document.getElementsByTagName('a'));\n      links.forEach(addFileDownloadListener);\n\n      // Adds listener to anchor tags added after initial load\n      /* istanbul ignore else */\n      if (typeof MutationObserver !== 'undefined') {\n        observer = new MutationObserver((mutations) => {\n          mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n              if (node.nodeName === 'A') {\n                addFileDownloadListener(node as HTMLAnchorElement);\n              }\n              if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {\n                Array.from(node.querySelectorAll('a') as HTMLAnchorElement[]).map(addFileDownloadListener);\n              }\n            });\n          });\n        });\n\n        observer.observe(document.body, {\n          subtree: true,\n          childList: true,\n        });\n      }\n    };\n\n    // If the document is already loaded, initialize immediately.\n    /* istanbul ignore else*/\n    if (document.readyState === 'complete') {\n      initializeFileDownloadTracking();\n    } else {\n      // Otherwise, wait for the load event.\n      const window = getGlobalScope();\n      /* istanbul ignore else*/\n      if (window) {\n        window.addEventListener('load', initializeFileDownloadTracking);\n      } else {\n        config.loggerProvider.debug('File download tracking is not installed because global is undefined.');\n      }\n    }\n  };\n\n  const execute = async (event: Event) => event;\n  const teardown = async () => {\n    observer?.disconnect();\n    removeClickListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n"]}